{
    "openapi": "3.0.0",
    "x-facepager-module":"Twitter",

    "x-facepager-extract" : "results",
	"x-facepager-objectid" : "id",
	"x-facepager-pagination": {
		"method" : "key",
		"param" : "cursor",
		"key" : "next_cursor_str",
		"stop" : "next_cursor"
	},

    "info": {
        "title": "Twitter API",
        "description": "The Twitter API lets you search for tweets and get user information.",
        "termsOfService": "https://developer.twitter.com/en/developer-terms",
        "version": "1.1"
    },
    "externalDocs": {
        "url":"https://developer.twitter.com/en/docs/api-reference-index"
    },
    "servers": [
        {
            "url":"https://api.twitter.com/1.1"
        }
    ],
    "paths":{
		"/application/rate_limit_status": {
            "get" : {
                "summary" : "Returns the current rate limits for methods belonging to the specified resource families. Each API resource belongs to a 'resource family' which is indicated in its method documentation. The method's resource family can be determined from the first component of the path after the resource version. This method responds with a map of methods belonging to the families specified by the resources parameter, the current remaining uses for each of those resources within the current rate limiting window, and their expiration time in epoch time. It also includes a rate_limit_context field that indicates the current access token or application-only authentication context. You may also issue requests to this method without any parameters to receive a map of all rate limited GET methods. If your application only uses a few of methods, you should explicitly provide a resources parameter with the specified resource families you work with. When using application-only auth, this method's response indicates the application-only auth rate limiting context. Read more about API Rate Limiting and review the limits.",
                "externalDocs": {
                    "url":"https://developer.twitter.com/en/docs/developer-utilities/rate-limit-status/api-reference/get-application-rate_limit_status"
                },  
                "parameters" : [                 
					{
					  "name" : "resources",
					   "in" : "query",
					   "description" : "A comma-separated list of resource families you want to know the current rate limit disposition for. For best performance, only specify the resource families pertinent to your application. See API Rate Limiting for more information.",
					   "schema":{"type":"string"},
					   "example": "statuses, friends, trends, help"
					}
				],
               "responses" : {
                    "200" : {
                        "description" : "The current rate limit for methods belonging to the specified resource families.",
                        "content" : {
                            "application/json" : {
                                "schema" : {
                                    "type" : "object"
								}
							}
						}
					}
				}
			}				
		},
		"/collections/entries" : {
			"get" : {
				"summary": "Retrieve the identified Collection, presented as a list of the Tweets curated within. The response structure of this method differs significantly from timelines you may be used to working with elsewhere in the Twitter API. To navigate a Collection, use the position object of a response, which includes attributes for max_position, min_position, and was_truncated. was_truncated indicates whether additional Tweets exist in the collection outside of the range of the current request. To retrieve Tweets further back in time, use the value of min_position found in the current response as the max_position parameter in the next call to this endpoint.",
				"externalDocs": {
					"url": "https://developer.twitter.com/en/docs/tweets/curate-a-collection/api-reference/get-collections-entries"
				},
				"parameters": [
					{
						"name": "id",
						"in": "query",
						"required": true,
						"description": "The identifier of the Collection for which to return results.",
						 "schema":{"type":"string"}
					},
					{
						"name": "count",
						"in": "query",
						"description": "Specifies the maximum number of results to include in the response. Specify a count between 1 and 200. A next_cursor value will be provided in the response if additional results are available.",
						 "schema":{"type":"string"}
					},
					{
						"name": "max_position",
						"in": "query",
						"description": "Returns results with a position value less than or equal to the specified position.",
						 "schema":{"type":"string"}
					},
					{
						"name": "min_position",
						"in": "query",
						"description": "Returns results with a position greater than the specified position.",
						 "schema":{"type":"string"}
					}
				],
               "responses" : {
                    "200" : {
                        "description" : "An identified Collection, presented as a list of the Tweets curated within.",
                        "content" : {
                            "application/json" : {
                                "schema" : {
                                    "type" : "object"
								}
							}
						}
					}
				}
			}
		},
		"/collections/list": {
			"get" : {
				"summary": "Find Collections created by a specific user or containing a specific curated Tweet. Results are organized in a cursored collection.",
				"externalDocs": {
					"url": "https://developer.twitter.com/en/docs/tweets/curate-a-collection/api-reference/get-collections-list"
				},
				"parameters": [
					{
						"name": "user_id",
						"in": "query",
						"description": "The ID of the user for whom to return results.",
						 "schema":{"type":"string"}
					},
					{
						"name": "screen_name",
						"in": "query",
						"required": true,
						"description": "The screen name of the user for whom to return results.",
						 "schema":{"type":"string"}
					},
					{
						"name": "tweet_id",
						"in": "query",
						"description": "The identifier of the Tweet for which to return results.",
						 "schema":{"type":"string"}
					},
					{
						"name": "count",
						"in": "query",
						"description": "Specifies the maximum number of results to include in the response. Specify a count between 1 and 200. A next_cursor value will be provided in the response if additional results are available.",
						 "schema":{"type":"string"}
					},
					{
						"name": "cursor",
						"in": "query",
						"description": "A string identifying the segment of the current result set to retrieve. Values for this parameter are yielded in the cursors node attached to response objects. Usage of the count parameter affects cursoring.",
						 "schema":{"type":"string"}
					}
				],
               "responses" : {
                    "200" : {
                        "description" : "Collections created by a specific user or containing a specific curated Tweet. Results are organized in a cursored collection.",
                        "content" : {
                            "application/json" : {
                                "schema" : {
                                    "type" : "object"
								}
							}
						}
					}
				}
			}
		},
		"/collections/show": {
			"get" : {
				"summary": "Retrieve information associated with a specific Collection.",
				"externalDocs": {
					"url": "https://developer.twitter.com/en/docs/tweets/curate-a-collection/api-reference/get-collections-show"
				},
				"parameters": [
					{
						"name": "id",
						"in": "query",
						"required": true,
						"description": "The identifier of the Collection for which to return results.",
						"schema":{"type":"string"}
					}
				],
               "responses" : {
                    "200" : {
                        "description" : "Information associated with a specific Collection.",
                        "content" : {
                            "application/json" : {
                                "schema" : {
                                    "type" : "object"
								}
							}
						}
					}
				}
			}				
		},
		"/favorites/list": {
			"get" : {
				"summary": "Note: favorites are now known as likes. Returns the 20 most recent Tweets liked by the authenticating or specified user.",
				"externalDocs": {
					"url": "https://developer.twitter.com/en/docs/tweets/post-and-engage/api-reference/get-favorites-list"
				},
				"parameters": [
					{
						"name": "user_id",
						"in": "query",
						"description": "The ID of the user for whom to return results.",
						 "schema":{"type":"string"}
					},
					{
						"name": "screen_name",
						"in": "query",
						"example": "<Object ID>",
						"description": "The screen name of the user for whom to return results.",
						 "schema":{"type":"string"}
					},
					{
						"name": "count",
						"in": "query",
						"description": "Specifies the number of records to retrieve. Must be less than or equal to 200; defaults to 20. The value of count is best thought of as a limit to the number of Tweets to return because suspended or deleted content is removed after the count has been applied.",
						 "schema":{"type":"string"}
					},
					{
						"name": "since_id",
						"in": "query",
						"description": "Returns results with an ID greater than (that is, more recent than) the specified ID. There are limits to the number of Tweets which can be accessed through the API. If the limit of Tweets has occured since the since_id, the since_id will be forced to the oldest ID available.",
						 "schema":{"type":"string"}
					},
					{
						"name": "max_id",
						"in": "query",
						"description": "Returns results with an ID less than (that is, older than) or equal to the specified ID.",
						 "schema":{"type":"string"}
					},
					{
						"name": "include_entities",
						"in": "query",
						"description": "The entities node will be omitted when set to false.",
						 "schema":{"type":"string"}
					}
				],
				"x-facepager-pagination": {
					"method" : "decrease",
					"param" : "max_id",
					"key" : "id"
				},
			"responses" : {
				"200" : {
					"description" : "The 20 most recent Tweets liked by the authenticating or specified user.",
					"content" : {
						"application/json": {
                                "schema": {
                                    "type": "array",
									"items": {
										"type":"object",
										"properties": {
											"$ref" : "#components/schema/tweet/properties"
										}
									}
								}
							}
						}
					}
				}
			}
		},
		"/followers/ids": {
            "get" : {
                "summary" : "Returns a cursored collection of user IDs for every user following the specified user. At this time, results are ordered with the most recent following first - however, this ordering is subject to unannounced change and eventual consistency issues. Results are given in groups of 5,000 user IDs and multiple 'pages' of results can be navigated through using the next_cursor value in subsequent requests. See Using cursors to navigate collections for more information. This method is especially powerful when used in conjunction with GET users / lookup, a method that allows you to convert user IDs into full user objects in bulk.",
                "externalDocs": {
                    "url":"https://developer.twitter.com/en/docs/accounts-and-users/follow-search-get-users/api-reference/get-followers-ids"
                },
                "parameters" : [
					{
					  "name" : "user_id",
					   "in" : "query",
					   "description" : "The ID of the user for whom to return results.",
					   "schema":{"type":"string"}
					},
					{
					  "name" : "screen_name",
					   "in" : "query",
					   "example": "<Object ID>",
					   "description" : "The screen name of the user for whom to return results.",
					   "schema":{"type":"string"}
					},
					{
					  "name" : "cursor",
					   "in" : "query",
					   "description" : "Causes the list of connections to be broken into pages of no more than 5000 IDs at a time. The number of IDs returned is not guaranteed to be 5000 as suspended users are filtered out after connections are queried. If no cursor is provided, a value of -1 will be assumed, which is the first 'page.' The response from the API will include a previous_cursor and next_cursor to allow paging back and forth. See Using cursors to navigate collections for more information.",
					   "schema":{"type":"string"}
					},
					{
					  "name" : "stringify_ids",
					   "in" : "query",
					   "description" : "Some programming environments will not consume Twitter IDs due to their size. Provide this option to have IDs returned as strings instead. More about Twitter IDs.",
					   "schema":{"type":"string"}
					},
					{
					  "name" : "count",
					   "in" : "query",
					   "description" : "Specifies the number of IDs attempt retrieval of, up to a maximum of 5,000 per distinct request. The value of count is best thought of as a limit to the number of results to return. When using the count parameter with this method, it is wise to use a consistent count value across all requests to the same user's collection. Usage of this parameter is encouraged in environments where all 5,000 IDs constitutes too large of a response.",
					   "schema":{"type":"string"}
					}
				],
			"responses" : {
				"200" : {
					"description" : "A cursored collection of user IDs for every user following the specified user.",
					"content" : {
						"application/json": {
                                "schema": {
                                    "type": "object",
                                    "x-facepager-extract" : "ids",
									"x-facepager-objectid" : "ids",
									"properties": {
										"ids": {
											"type": "array"
										}
									}
								}
							}
						}
					}
				}
			}
		},
		"/followers/list": {
            "get" : {
                "summary" : "Returns a cursored collection of user objects for users following the specified user. At this time, results are ordered with the most recent following first - however, this ordering is subject to unannounced change and eventual consistency issues. Results are given in groups of 20 users and multiple 'pages' of results can be navigated through using the next_cursor value in subsequent requests. See Using cursors to navigate collections for more information.",
                "externalDocs": {
                    "url":"https://developer.twitter.com/en/docs/accounts-and-users/follow-search-get-users/api-reference/get-followers-list"
                },
                "parameters" : [
					{
					  "name" : "user_id",
					   "in" : "query",
					   "description" : "The ID of the user for whom to return results.",
					   "schema":{"type":"string"}
					},
					{
						"name": "screen_name",
						"in": "query",
						"example" : "<Object ID>",
						"description": "The screen name of the user for whom to return results.",
						 "schema":{"type":"string"}
					},
					{
						"name": "cursor",
						"in": "query",
						"description": "Causes the results to be broken into pages. If no cursor is provided, a value of -1 will be assumed, which is the first 'page.' The response from the API will include a previous_cursor and next_cursor to allow paging back and forth. See Using cursors to navigate collections for more information.",
						 "schema":{"type":"string"}
					},
					{
						"name": "count",
						"in": "query",
						"description": "The number of users to return per page, up to a maximum of 200. Defaults to 20.",
						 "schema":{"type":"string"}
					},
					{
						"name": "skip_status",
						"in": "query",
						"description": "When set to either true, t or 1, statuses will not be included in the returned user objects. If set to any other value, statuses will be included.",
						 "schema":{"type":"string"}
					},
					{
						"name": "include_user_entities",
						"in": "query",
						"description": "The user object entities node will not be included when set to false.",
						 "schema":{"type":"string"}
					}
				],
			"responses" : {
				"200" : {
					"description" : "A cursored collection of user objects for users following the specified user.",
					"content" : {
						"application/json": {
                                "schema" : {
                                    "type" : "object",
                                    "x-facepager-extract" : "users",
									"properties": {
										"users" : {
											"type": "array"
									    }
									}
								}
							}
						}
					}
				}
			}
		},
		"/friends/ids": {
			"get" : {
				"summary": "Returns a cursored collection of user IDs for every user the specified user is following (otherwise known as their 'friends'). At this time, results are ordered with the most recent following first - however, this ordering is subject to unannounced change and eventual consistency issues. Results are given in groups of 5,000 user IDs and multiple 'pages' of results can be navigated through using the next_cursor value in subsequent requests. See Using cursors to navigate collections for more information. This method is especially powerful when used in conjunction with GET users / lookup, a method that allows you to convert user IDs into full user objects in bulk.",
				"externalDocs": {
					"url": "https://developer.twitter.com/en/docs/accounts-and-users/follow-search-get-users/api-reference/get-friends-ids"
				},
				"parameters": [
					{
						"name": "user_id",
						"in": "query",
						"description": "The ID of the user for whom to return results.",
						"schema":{"type":"string"}
					},
					{
						"name": "screen_name",
						"in": "query",
						"example": "<Object ID>",
						"description": "The screen name of the user for whom to return results.",
						"schema":{"type":"string"}
					},
					{
						"name": "cursor",
						"in": "query",
						"description": "Causes the list of connections to be broken into pages of no more than 5000 IDs at a time. The number of IDs returned is not guaranteed to be 5000 as suspended users are filtered out after connections are queried. If no cursor is provided, a value of -1 will be assumed, which is the first 'page.' The response from the API will include a previous_cursor and next_cursor to allow paging back and forth. See Using cursors to navigate collections for more information.",
						"schema":{"type":"string"}
					},
					{
						"name": "stringify_ids",
						"in": "query",
						"description": "Some programming environments will not consume Twitter IDs due to their size. Provide this option to have IDs returned as strings instead. More about Twitter IDs.",
						"schema":{"type":"string"}
					},
					{
						"name": "count",
						"in": "query",
						"description": "Specifies the number of IDs attempt retrieval of, up to a maximum of 5,000 per distinct request. The value of count is best thought of as a limit to the number of results to return. When using the count parameter with this method, it is wise to use a consistent count value across all requests to the same user's collection. Usage of this parameter is encouraged in environments where all 5,000 IDs constitutes too large of a response.",
						"schema":{"type":"string"}
					}
				],
               "responses" : {
                    "200" : {
                        "description" : "A cursored collection of user IDs for every user the specified user is following (otherwise known as their 'friends').",
                        "content" : {
                            "application/json" : {
                                "schema": {
                                    "type": "object",
                                    "x-facepager-extract" : "ids",
									"x-facepager-objectid" : "ids",
									"properties": {
										"ids": {
											"type": "array",
											"items": {
												"properties": {
													"$ref" : "#components/schema/user/properties/id"
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		},
		"/friends/list": {
			"get" : {
				"summary": "Returns a cursored collection of user objects for every user the specified user is following (otherwise known as their 'friends'). At this time, results are ordered with the most recent following first - however, this ordering is subject to unannounced change and eventual consistency issues. Results are given in groups of 20 users and multiple 'pages' of results can be navigated through using the next_cursor value in subsequent requests. See Using cursors to navigate collections for more information.",
				"externalDocs": {
					"url": "https://developer.twitter.com/en/docs/accounts-and-users/follow-search-get-users/api-reference/get-friends-list"
				},
				"parameters": [
					{
						"name": "user_id",
						"in": "query",
						"description": "The ID of the user for whom to return results.",
						"schema":{"type":"string"}
					},
					{
						"name": "screen_name",
						"in": "query",
						"example": "<Object ID>",
						"description": "The screen name of the user for whom to return results.",
						"schema":{"type":"string"}
					},
					{
						"name": "cursor",
						"in": "query",
						"description": "Causes the results to be broken into pages. If no cursor is provided, a value of -1 will be assumed, which is the first 'page.' The response from the API will include a previous_cursor and next_cursor to allow paging back and forth. See Using cursors to navigate collections for more information.",
						"schema":{"type":"string"}
					},
					{
						"name": "count",
						"in": "query",
						"description": "The number of users to return per page, up to a maximum of 200.",
						"schema":{"type":"string"}
					},
					{
						"name": "skip_status",
						"in": "query",
						"description": "When set to either true, t or 1 statuses will not be included in the returned user objects.",
						"schema":{"type":"string"}
					},
					{
						"name": "include_user_entities",
						"in": "query",
						"description": "The user object entities node will not be included when set to false.",
						"schema":{"type":"string"}
					}
				],
               "responses" : {
                    "200" : {
                        "description" : "A cursored collection of user objects for every user the specified user is following (otherwise known as their 'friends').",
                        "content" : {
                            "application/json" : {
                                "schema" : {
                                    "type" : "object",
                                    "x-facepager-extract" : "users",
									"properties": {
										"users" : {
											"type": "array",
											"items": {
												"type":"object",
												"properties": {
													"$ref" : "#components/schema/user/properties"
												}
											}
									    }
									}
								}
							}
						}
					}
				}
			}
		},
		"/friendships/incoming": {
			"get" : {
				"summary": "Returns a collection of numeric IDs for every user who has a pending request to follow the authenticating user.",
				"externalDocs": {
					"url": "https://developer.twitter.com/en/docs/accounts-and-users/follow-search-get-users/api-reference/get-friendships-incoming"
				},
				"parameters": [
					{
						"name": "cursor",
						"in": "query",
						"description": "Causes the list of connections to be broken into pages of no more than 5000 IDs at a time. The number of IDs returned is not guaranteed to be 5000 as suspended users are filtered out after connections are queried. If no cursor is provided, a value of -1 will be assumed, which is the first 'page.' The response from the API will include a previous_cursor and next_cursor to allow paging back and forth.",
						"schema":{"type":"string"}
					},
					{
						"name": "stringify_ids",
						"in": "query",
						"description": "Many programming environments will not consume our Tweet ids due to their size. Provide this option to have ids returned as strings instead.",
						"schema":{"type":"string"}
					}
				],
               "responses" : {
                    "200" : {
                        "description" : "A collection of numeric IDs for every user who has a pending request to follow the authenticating user.",
                        "content" : {
                            "application/json" : {
                                "schema": {
                                    "type": "object",
                                    "x-facepager-extract" : "ids",
									"x-facepager-objectid" : "ids",
									"properties": {
										"ids": {
											"type": "array",
											"items": {
												"properties": {
													"$ref" : "#components/schema/user/properties/id"
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		},
		"/friendships/lookup": {
			"get" : {
				"summary": "Returns the relationships of the authenticating user to the comma-separated list of up to 100 screen_names or user_ids provided. Values for connections can be: following, following_requested, followed_by, none, blocking, muting.",
				"externalDocs": {
					"url": "https://developer.twitter.com/en/docs/accounts-and-users/follow-search-get-users/api-reference/get-friendships-lookup"
				},
				"parameters": [
					{
						"name": "screen_name",
						"in": "query",
						"description": "A comma separated list of screen names, up to 100 are allowed in a single request.",
						"schema":{"type":"string"}
					},
					{
						"name": "user_id",
						"in": "query",
						"description": "A comma separated list of user IDs, up to 100 are allowed in a single request.",
						"schema":{"type":"string"}
					}
				],
			"responses" : {
				"200" : {
					"description" : "The relationships of the authenticating user to the comma-separated list of up to 100 screen_names or user_ids provided.",
					"content" : {
						"application/json": {
                                "schema": {
                                    "type": "array",
									"items": {
										"type":"object"
									}
								}
							}
						}
					}
				}
			}
		},
		"/friendships/no_retweets/ids": {
			"get" : {
				"summary": "Returns a collection of user_ids that the currently authenticated user does not want to receive retweets from.",
				"externalDocs": {
					"url": "https://developer.twitter.com/en/docs/accounts-and-users/follow-search-get-users/api-reference/get-friendships-no_retweets-ids"
				},
				"parameters": [
					{
						"name": "stringify_ids",
						"in": "query",
						"description": "Some programming environments will not consume Twitter IDs due to their size. Provide this option to have IDs returned as strings instead. Read more about Twitter IDs. This parameter is important to use in Javascript environments.",
						"schema":{"type":"string"}
					}
				],
               "responses" : {
                    "200" : {
                        "description" : "A collection of user_ids that the currently authenticated user does not want to receive retweets from.",
                        "content" : {
                            "application/json" : {
                                "schema": {
                                    "type": "array"
								}
							}
						}
					}
				}
			}
		},
		"/friendships/outgoing": {
			"get" : {
				"summary": "Returns a collection of numeric IDs for every protected user for whom the authenticating user has a pending follow request.",
				"externalDocs": {
					"url": "https://developer.twitter.com/en/docs/accounts-and-users/follow-search-get-users/api-reference/get-friendships-outgoing"
				},
				"parameters": [
					{
						"name": "cursor",
						"in": "query",
						"description": "Causes the list of connections to be broken into pages of no more than 5000 IDs at a time. The number of IDs returned is not guaranteed to be 5000 as suspended users are filtered out after connections are queried. If no cursor is provided, a value of -1 will be assumed, which is the first 'page.' The response from the API will include a previous_cursor and next_cursor to allow paging back and forth. See Using cursors to navigate collections for more information.",
						"schema":{"type":"string"}
					},
					{
						"name": "stringify_ids",
						"in": "query",
						"description": "Some programming environments will not consume Twitter IDs due to their size. Provide this option to have IDs returned as strings instead. More about Twitter IDs.",
						"schema":{"type":"string"}
					}
				],
               "responses" : {
                    "200" : {
                        "description" : "A collection of numeric IDs for every protected user for whom the authenticating user has a pending follow request.",
                        "content" : {
                            "application/json" : {
                                "schema": {
                                    "type": "object",
                                    "x-facepager-extract" : "ids",
									"x-facepager-objectid" : "ids",
									"properties": {
										"ids": {
											"type": "array"
										}
									}
								}
							}
						}
					}
				}
			}
		},
		"/friendships/show": {
			"get" : {
				"summary": "Returns detailed information about the relationship between two arbitrary users.",
				"externalDocs": {
					"url": "https://developer.twitter.com/en/docs/accounts-and-users/follow-search-get-users/api-reference/get-friendships-show"
				},
				"parameters": [
					{
						"name": "source_id",
						"in": "query",
						"required": true,
						"example": "<Object ID>",
						"description": "The user_id of the subject user.",
						"schema":{"type":"string"}
					},
					{
						"name": "source_screen_name",
						"in": "query",
						"description": "The screen_name of the subject user.",
						"schema":{"type":"string"}
					},
					{
						"name": "target_id",
						"in": "query",
						"required": true,
						"description": "The user_id of the target user.",
						"schema":{"type":"string"}
					},
					{
						"name": "target_screen_name",
						"in": "query",
						"description": "The screen_name of the target user.",
						"schema":{"type":"string"}
					}
				],
               "responses" : {
                    "200" : {
                        "description" : "Information about the relationship between two arbitrary users.",
                        "content" : {
                            "application/json" : {
                                "schema" : {
                                    "type" : "object"
								}
							}
						}
					}
				}
			}
		},
		"/geo/id/{place_id}": {
			"get" : {
				"summary": "Returns all the information about a known place.",
				"externalDocs": {
					"url": "https://developer.twitter.com/en/docs/geo/place-information/api-reference/get-geo-id-place_id"
				},
				"parameters": [
					{
						"name": "place_id",
						"in": "path",
						"required": true,
						"description": "A place in the world. These IDs can be retrieved from geo/reverse_geocode.",
						"schema":{"type":"string"}
					}
				],
               "responses" : {
                    "200" : {
                        "description" : "All the information about a known place.",
                        "content" : {
                            "application/json" : {
                                "schema" : {
                                    "type" : "object",
									"properties": {
										"$ref" : "#components/schema/place/properties"
									}
								}
							}
						}
					}
				}
			}
		},
		"/geo/reverse_geocode": {
			"get" : {
				"summary": "Given a latitude and a longitude, searches for up to 20 places that can be used as a place_id when updating a status. This request is an informative call and will deliver generalized results about geography.",
				"externalDocs": {
					"url": "https://developer.twitter.com/en/docs/geo/places-near-location/api-reference/get-geo-reverse_geocode"
				},
				"parameters": [
					{
						"name": "lat",
						"in": "query",
						"required": true,
						"description": "The latitude to search around. This parameter will be ignored unless it is inside the range -90.0 to +90.0 (North is positive) inclusive. It will also be ignored if there isn't a corresponding long parameter.",
						"schema":{"type":"string"}
					},
					{
						"name": "long",
						"in": "query",
						"required": true,
						"description": "The longitude to search around. The valid ranges for longitude are -180.0 to +180.0 (East is positive) inclusive. This parameter will be ignored if outside that range, if it is not a number, if geo_enabled is disabled, or if there not a corresponding lat parameter.",
						"schema":{"type":"string"}
					},
					{
						"name": "accuracy",
						"in": "query",
						"description": "A hint on the 'region' in which to search. If a number, then this is a radius in meters, but it can also take a string that is suffixed with ft to specify feet. If this is not passed in, then it is assumed to be 0m. If coming from a device, in practice, this value is whatever accuracy the device has measuring its location (whether it be coming from a GPS, WiFi triangulation, etc.).",
						"schema":{"type":"string"}
					},
					{
						"name": "granularity",
						"in": "query",
						"description": "This is the minimal granularity of place types to return and must be one of: neighborhood, city, admin or country . If no granularity is provided for the request neighborhood is assumed. Setting this to city, for example, will find places which have a type of city, admin or country.",
						"schema":{"type":"string"}
					},
					{
						"name": "max_results",
						"in": "query",
						"description": "A hint as to the number of results to return. This does not guarantee that the number of results returned will equal max_results, but instead informs how many 'nearby' results to return. Ideally, only pass in the number of places you intend to display to the user here.",
						"schema":{"type":"string"}
					}
				],
               "responses" : {
                    "200" : {
                        "description" : "Places that can be used as a place_id when updating a status.",
                        "content" : {
                            "application/json" : {
                                "schema" : {
                                    "type" : "object",
                                    "x-facepager-extract" : "places",
									"properties": {
										"places" : {
											"type": "array",
											"items": {
												"type":"object",
												"properties": {
													"$ref" : "#components/schema/place/properties"
												}
											}
									    }
									}
								}
							}
						}
					}
				}
			}
		},
		"/geo/search": {
			"get" : {
				"summary": "Search for places that can be attached to a Tweet via POST statuses/update. Given a latitude and a longitude pair, an IP address, or a name, this request will return a list of all the valid places that can be used as the place_id when updating a status. Conceptually, a query can be made from the user's location, retrieve a list of places, have the user validate the location they are at, and then send the ID of this location with a call to POST statuses/update. This is the recommended method to use find places that can be attached to statuses/update. Unlike GET geo/reverse_geocode which provides raw data access, this endpoint can potentially re-order places with regards to the user who is authenticated. This approach is also preferred for interactive place matching with the user. Some parameters in this method are only required based on the existence of other parameters. For instance, 'lat' is required if 'long' is provided, and vice-versa. Authentication is recommended, but not required with this method.",
				"externalDocs": {
					"url": "https://developer.twitter.com/en/docs/geo/places-near-location/api-reference/get-geo-search"
				},
				"parameters": [
					{
						"name": "lat",
						"in": "query",
						"required": true,
						"description": "The latitude to search around. This parameter will be ignored unless it is inside the range -90.0 to +90.0 (North is positive) inclusive. It will also be ignored if there isn't a corresponding long parameter.",
						"schema":{"type":"string"}
					},
					{
						"name": "long",
						"in": "query",
						"required": true,
						"description": "The longitude to search around. The valid ranges for longitude are -180.0 to +180.0 (East is positive) inclusive. This parameter will be ignored if outside that range, if it is not a number, if geo_enabled is disabled, or if there not a corresponding lat parameter.",
						"schema":{"type":"string"}
					},
					{
						"name": "query",
						"in": "query",
						"description": "Free-form text to match against while executing a geo-based query, best suited for finding nearby locations by name. Remember to URL encode the query.",
						"schema":{"type":"string"}
					},
					{
						"name": "ip",
						"in": "query",
						"description": "An IP address. Used when attempting to fix geolocation based off of the user's IP address.",
						"schema":{"type":"string"}
					},
					{
						"name": "granularity",
						"in": "query",
						"description": "This is the minimal granularity of place types to return and must be one of: neighborhood , city , admin or country. If no granularity is provided for the request neighborhood is assumed. Setting this to city, for example, will find places which have a type of city, admin or country.",
						"schema":{"type":"string"}
					},
					{
						"name": "accuracy",
						"in": "query",
						"description": "A hint on the 'region' in which to search. If a number, then this is a radius in meters, but it can also take a string that is suffixed with ft to specify feet. If this is not passed in, then it is assumed to be 0m . If coming from a device, in practice, this value is whatever accuracy the device has measuring its location (whether it be coming from a GPS, WiFi triangulation, etc.).",
						"schema":{"type":"string"}
					},
					{
						"name": "max_results",
						"in": "query",
						"description": "A hint as to the number of results to return. This does not guarantee that the number of results returned will equal max_results, but instead informs how many 'nearby' results to return. Ideally, only pass in the number of places you intend to display to the user here.",
						"schema":{"type":"string"}
					},
					{
						"name": "contained_within",
						"in": "query",
						"description": "This is the place_id which you would like to restrict the search results to. Setting this value means only places within the given place_id will be found. Specify a place_id. For example, to scope all results to places within 'San Francisco, CA USA', you would specify a place_id of '5a110d312052166f'.",
						"schema":{"type":"string"}
					},
					{
						"name": "attribute:street_address",
						"in": "query",
						"description": "This parameter searches for places which have this given street address. There are other well-known, and application specific attributes available. Custom attributes are also permitted. Learn more about Place attributes.",
						"schema":{"type":"string"}
					}
				],
               "responses" : {
                    "200" : {
                        "description" : "Places that can be attached to a Tweet via POST statuses/update.",
                        "content" : {
                            "application/json" : {
                                "schema" : {
                                    "type" : "object",
                                    "x-facepager-extract" : "places",
									"properties": {
										"places" : {
											"type": "array",
											"items": {
												"type":"object",
												"properties": {
													"$ref" : "#components/schema/place/properties"
												}
											}
									    }
									}
								}
							}
						}
					}
				}
			}
		},
		"/help/configuration":{
			"get" : {
				"summary": "Returns the current configuration used by Twitter including twitter.com slugs which are not usernames, maximum photo resolutions, and t.co shortened URL length. It is recommended applications request this endpoint when they are loaded, but no more than once a day. It is recommended applications request this endpoint when they are loaded, but no more than once a day.",
				"externalDocs": {
					"url": "https://developer.twitter.com/en/docs/developer-utilities/configuration/api-reference/get-help-configuration"
				},
			   "parameters": [],
               "responses" : {
                    "200" : {
                        "description" : "The current configuration used by Twitter including twitter.com slugs which are not usernames, maximum photo resolutions, and t.co shortened URL length.",
                        "content" : {
                            "application/json" : {
                                "schema" : {
                                    "type" : "object"
								}
							}
						}
					}
				}
			}
		},
		"/help/languages": {
			"get" : {
				"summary": "Returns the list of languages supported by Twitter along with the language code supported by Twitter. The language code may be formatted as ISO 639-1 alpha-2 (en), ISO 639-3 alpha-3 (msa), or ISO 639-1 alpha-2 combined with an ISO 3166-1 alpha-2 localization (zh-tw).",
				"externalDocs": {
					"url": "https://developer.twitter.com/en/docs/developer-utilities/supported-languages/api-reference/get-help-languages"
				},
			   "parameters": [],
				"responses" : {
					"200" : {
						"description" : "A list of languages supported by Twitter along with the language code supported by Twitter.",
						"content" : {
							"application/json": {
								"schema": {
									"type": "array",
									"items": {
										"type":"object"
									}
								}
							}
						}
					}
				}
			}
		},
		"/lists/list": {
			"get" : {
				"summary": "Returns all lists the authenticating or specified user subscribes to, including their own. The user is specified using the user_id or screen_name parameters. If no user is given, the authenticating user is used. A maximum of 100 results will be returned by this call. Subscribed lists are returned first, followed by owned lists. This means that if a user subscribes to 90 lists and owns 20 lists, this method returns 90 subscriptions and 10 owned lists. The reverse method returns owned lists first, so with reverse=true, 20 owned lists and 80 subscriptions would be returned. If your goal is to obtain every list a user owns or subscribes to, use GET lists / ownerships and/or GET lists / subscriptions instead.",
				"externalDocs": {
					"url": "https://developer.twitter.com/en/docs/accounts-and-users/create-manage-lists/api-reference/get-lists-list"
				},
				"parameters": [
					{
						"name": "user_id",
						"in": "query",
						"description": "The ID of the user for whom to return results. Helpful for disambiguating when a valid user ID is also a valid screen name. Note: : Specifies the ID of the user to get lists from. Helpful for disambiguating when a valid user ID is also a valid screen name.",
						"schema":{"type":"string"}
					},
					{
						"name": "screen_name",
						"in": "query",
						"example": "<Object ID>",
						"description": "The screen name of the user for whom to return results. Helpful for disambiguating when a valid screen name is also a user ID.",
						"schema":{"type":"string"}
					},
					{
						"name": "reverse",
						"in": "query",
						"description": "Set this to true if you would like owned lists to be returned first. See description above for information on how this parameter works.",
						"schema":{"type":"string"}
					}
				],
				"responses" : {
					"200" : {
						"description" : "All lists the authenticating or specified user subscribes to, including their own.",
						"content" : {
							"application/json": {
								"schema": {
									"type": "array",
									"items": {
										"type":"object"
									}
								}
							}
						}
					}
				}
			}
		},
		"/lists/members/show": {
			"get" : {
				"summary": "Check if the specified user is a member of the specified list.",
				"externalDocs": {
					"url": "https://developer.twitter.com/en/docs/accounts-and-users/create-manage-lists/api-reference/get-lists-members-show"
				},
				"parameters": [
					{
						"name": "list_id",
						"in": "query",
						"required": true,
						"description": "The numerical id of the list.",
						"schema":{"type":"string"}
					},
					{
						"name": "slug",
						"in": "query",
						"description": "You can identify a list by its slug instead of its numerical id. If you decide to do so, note that you'll also have to specify the list owner using the owner_id or owner_screen_name parameters.",
						"schema":{"type":"string"}
					},
					{
						"name": "user_id",
						"in": "query",
						"required": true,
						"example": "<Object ID>",
						"description": "The ID of the user for whom to return results. Helpful for disambiguating when a valid user ID is also a valid screen name.",
						"schema":{"type":"string"}
					},
					{
						"name": "screen_name",
						"in": "query",
						"description": "The screen name of the user for whom to return results. Helpful for disambiguating when a valid screen name is also a user ID.",
						"schema":{"type":"string"}
					},
					{
						"name": "owner_screen_name",
						"in": "query",
						"description": "The screen name of the user who owns the list being requested by a slug.",
						"schema":{"type":"string"}
					},
					{
						"name": "owner_id",
						"in": "query",
						"description": "The user ID of the user who owns the list being requested by a slug.",
						"schema":{"type":"string"}
					},
					{
						"name": "include_entities",
						"in": "query",
						"description": "When set to either true, t or 1, each tweet will include a node called 'entities'. This node offers a variety of metadata about the tweet in a discreet structure, including: user_mentions, urls, and hashtags. While entities are opt-in on timelines at present, they will be made a default component of output in the future. See Tweet Entities for more details.",
						"schema":{"type":"string"}
					},
					{
						"name": "skip_status",
						"in": "query",
						"description": "When set to either true, t or 1 statuses will not be included in the returned user objects.",
						"schema":{"type":"string"}
					}
				],
               "responses" : {
                    "200" : {
                        "description" : "Shows if the specified user is a member of the specified list.",
                        "content" : {
                            "application/json" : {
                                "schema" : {
                                    "type" : "object"
								}
							}
						}
					}
				}
			}
		},
		"/lists/members": {
			"get" : {
				"summary": "Returns the members of the specified list. Private list members will only be shown if the authenticated user owns the specified list.",
				"externalDocs": {
					"url": "https://developer.twitter.com/en/docs/accounts-and-users/create-manage-lists/api-reference/get-lists-members"
				},
				"parameters": [
					{
						"name": "list_id",
						"in": "query",
						"required": true,
						"example": "<Object ID>",
						"description": "The numerical id of the list.",
						"schema":{"type":"string"}
					},
					{
						"name": "slug",
						"in": "query",
						"description": "You can identify a list by its slug instead of its numerical id. If you decide to do so, note that you'll also have to specify the list owner using the owner_id or owner_screen_name parameters.",
						"schema":{"type":"string"}
					},
					{
						"name": "owner_screen_name",
						"in": "query",
						"description": "The screen name of the user who owns the list being requested by a slug.",
						"schema":{"type":"string"}
					},
					{
						"name": "owner_id",
						"in": "query",
						"description": "The user ID of the user who owns the list being requested by a slug.",
						"schema":{"type":"string"}
					},
					{
						"name": "count",
						"in": "query",
						"description": "Specifies the number of results to return per page (see cursor below). The default is 20, with a maximum of 5,000.",
						"schema":{"type":"string"}
					},
					{
						"name": "cursor",
						"in": "query",
						"description": "Causes the collection of list members to be broken into 'pages' of consistent sizes (specified by the count parameter). If no cursor is provided, a value of -1 will be assumed, which is the first 'page.'",
						"schema":{"type":"string"}
					},
					{
						"name": "include_entities",
						"in": "query",
						"description": "The entities node will not be included when set to false.",
						"schema":{"type":"string"}
					},
					{
						"name": "skip_status",
						"in": "query",
						"description": "When set to either true, t or 1 statuses will not be included in the returned user objects.",
						"schema":{"type":"string"}
					}
				],
               "responses" : {
                    "200" : {
                        "description" : "The members of a specified list.",
                        "content" : {
                            "application/json" : {
                                "schema" : {
                                    "type" : "object",
                                    "x-facepager-extract" : "users",
									"properties": {
										"users" : {
											"type": "array",
											"items": {
												"type":"object",
												"properties": {
													"$ref" : "#components/schema/user/properties"
												}
											}
									    }
									}
								}
							}
						}
					}
				}
			}
		},
		"/lists/memberships": {
			"get" : {
				"summary": "Returns the lists the specified user has been added to. If user_id or screen_name are not provided, the memberships for the authenticating user are returned.",
				"externalDocs": {
					"url": "https://developer.twitter.com/en/docs/accounts-and-users/create-manage-lists/api-reference/get-lists-memberships"
				},
				"parameters": [
					{
						"name": "user_id",
						"in": "query",
						"description": "The ID of the user for whom to return results. Helpful for disambiguating when a valid user ID is also a valid screen name.",
						"schema":{"type":"string"}
					},
					{
						"name": "screen_name",
						"in": "query",
						"example": "<Object ID>",
						"description": "The screen name of the user for whom to return results. Helpful for disambiguating when a valid screen name is also a user ID.",
						"schema":{"type":"string"}
					},
					{
						"name": "count",
						"in": "query",
						"description": "The amount of results to return per page. Defaults to 20. No more than 1000 results will ever be returned in a single page.",
						"schema":{"type":"string"}
					},
					{
						"name": "cursor",
						"in": "query",
						"description": "Breaks the results into pages. Provide a value of -1 to begin paging. Provide values as returned in the response body's next_cursor and previous_cursor attributes to page back and forth in the list. It is recommended to always use cursors when the method supports them. See Cursoring for more information.",
						"schema":{"type":"string"}
					},
					{
						"name": "filter_to_owned_lists",
						"in": "query",
						"description": "When set to true , t or 1 , will return just lists the authenticating user owns, and the user represented by user_id or screen_name is a member of.",
						"schema":{"type":"string"}
					}
				],
               "responses" : {
                    "200" : {
                        "description" : "The lists the specified user has been added to or the memberships for the authenticating user.",
                        "content" : {
                            "application/json" : {
                                "schema" : {
                                    "type" : "object",
                                    "x-facepager-extract" : "lists",
									"properties": {
										"lists" : {
											"type": "array",
											"items": {
												"type":"object"
											}
									    }
									}
								}
							}
						}
					}
				}
			}
		},
		"/lists/ownerships" : {
			"get" : {
				"summary": "Returns the lists owned by the specified Twitter user. Private lists will only be shown if the authenticated user is also the owner of the lists.",
				"externalDocs": {
					"url": "https://developer.twitter.com/en/docs/accounts-and-users/create-manage-lists/api-reference/get-lists-ownerships"
				},
				"parameters": [
					{
						"name": "user_id",
						"in": "query",
						"description": "The ID of the user for whom to return results. Helpful for disambiguating when a valid user ID is also a valid screen name.",
						"schema":{"type":"string"}
					},
					{
						"name": "screen_name",
						"in": "query",
						"example": "<Object ID>",
						"description": "The screen name of the user for whom to return results. Helpful for disambiguating when a valid screen name is also a user ID.",
						"schema":{"type":"string"}
					},
					{
						"name": "count",
						"in": "query",
						"description": "The amount of results to return per page. Defaults to 20. No more than 1000 results will ever be returned in a single page.",
						"schema":{"type":"string"}
					},
					{
						"name": "cursor",
						"in": "query",
						"description": "Breaks the results into pages. Provide a value of -1 to begin paging. Provide values as returned in the response body's next_cursor and previous_cursor attributes to page back and forth in the list. It is recommended to always use cursors when the method supports them. See Cursoring for more information.",
						"schema":{"type":"string"}
					}
				],
               "responses" : {
                    "200" : {
                        "description" : "The lists owned by the specified Twitter user",
                        "content" : {
                            "application/json" : {
                                "schema" : {
                                    "type" : "object",
                                    "x-facepager-extract" : "lists",
									"properties": {
										"lists" : {
											"type": "array",
											"items": {
												"type":"object"
											}
									    }
									}
								}
							}
						}
					}
				}
			}
		},
		"/lists/show": {
			"get" : {
				"summary": "Returns the specified list. Private lists will only be shown if the authenticated user owns the specified list.",
				"externalDocs": {
					"url": "https://developer.twitter.com/en/docs/accounts-and-users/create-manage-lists/api-reference/get-lists-show"
				},
				"parameters": [
					{
						"name": "list_id",
						"in": "query",
						"required": true,
						"example": "<Object ID>",
						"description": "The identifier of the Collection for which to return results.",
						"schema":{"type":"string"}
					},
					{
						"name": "slug",
						"in": "query",
						"description": "You can identify a list by its slug instead of its numerical id. If you decide to do so, note that you'll also have to specify the list owner using the owner_id or owner_screen_name parameters.",
						"schema":{"type":"string"}
					},
					{
						"name": "owner_screen_name",
						"in": "query",
						"description": "The screen name of the user who owns the list being requested by a slug.",
						"schema":{"type":"string"}
					},
					{
						"name": "owner_id",
						"in": "query",
						"description": "The user ID of the user who owns the list being requested by a slug.",
						"schema":{"type":"string"}
					}
				],
               "responses" : {
                    "200" : {
                        "description" : "The specified list.",
                        "content" : {
                            "application/json" : {
                                "schema" : {
                                    "type" : "object"
								}
							}
						}
					}
				}
			}

		},
		"/lists/statuses": {
			"get" : {
				"summary": "Returns a timeline of tweets authored by members of the specified list. Retweets are included by default. Use the include_rts=false parameter to omit retweets. Embedded Timelines is a great way to embed list timelines on your website.",
				"externalDocs": {
					"url": "https://developer.twitter.com/en/docs/accounts-and-users/create-manage-lists/api-reference/get-lists-statuses"
				},
				"parameters": [
					{
						"name": "list_id",
						"in": "query",
						"required": true,
						"example": "<Object ID>",
						"description": "The numerical id of the list.",
						"schema":{"type":"string"}
					},
					{
						"name": "slug",
						"in": "query",
						"description": "You can identify a list by its slug instead of its numerical id. If you decide to do so, note that you'll also have to specify the list owner using the owner_id or owner_screen_name parameters.",
						"schema":{"type":"string"}
					},
					{
						"name": "owner_screen_name",
						"in": "query",
						"description": "The screen name of the user who owns the list being requested by a slug.",
						"schema":{"type":"string"}
					},
					{
						"name": "owner_id",
						"in": "query",
						"description": "The user ID of the user who owns the list being requested by a slug.",
						"schema":{"type":"string"}
					},
					{
						"name": "since_id",
						"in": "query",
						"description": "Returns results with an ID greater than (that is, more recent than) the specified ID. There are limits to the number of Tweets which can be accessed through the API. If the limit of Tweets has occured since the since_id, the since_id will be forced to the oldest ID available.",
						"schema":{"type":"string"}
					},
					{
						"name": "max_id",
						"in": "query",
						"description": "Returns results with an ID less than (that is, older than) or equal to the specified ID.",
						"schema":{"type":"string"}
					},
					{
						"name": "count",
						"in": "query",
						"description": "Specifies the number of results to retrieve per 'page.'",
						"schema":{"type":"string"}
					},
					{
						"name": "include_entities",
						"in": "query",
						"description": "Entities are ON by default in API 1.1, each tweet includes a node called 'entities'. This node offers a variety of metadata about the tweet in a discreet structure, including: user_mentions, urls, and hashtags. You can omit entities from the result by using include_entities=false.",
						"schema":{"type":"string"}
					},
					{
						"name": "include_rts",
						"in": "query",
						"description": "When set to either true , t or 1 , the list timeline will contain native retweets (if they exist) in addition to the standard stream of tweets. The output format of retweeted tweets is identical to the representation you see in home_timeline.",
						"schema":{"type":"string"}
					}
				],
				"x-facepager-pagination": {
					"method" : "decrease",
					"param" : "max_id",
					"key" : "id"
				},
            "responses" : {
                "200" : {
                    "description" : "A timeline of tweets authored by members of the specified list.",
					"content" : {
						"application/json": {
                                "schema": {
                                    "type": "array",
									"items": {
										"type":"object",
										"properties": {
											"$ref" : "#components/schema/tweet/properties"
										}
									}
								}
							}
						}
					}
				}
			}
		},
		"/lists/subscribers": {
			"get" : {
				"summary": "Returns the subscribers of the specified list. Private list subscribers will only be shown if the authenticated user owns the specified list.",
				"externalDocs": {
					"url": "https://developer.twitter.com/en/docs/accounts-and-users/create-manage-lists/api-reference/get-lists-subscribers"
				},
				"parameters": [
					{
						"name": "list_id",
						"in": "query",
						"required": true,
						"example": "<Object ID>",
						"description": "The numerical id of the list.",
						"schema":{"type":"string"}
					},
					{
						"name": "slug",
						"in": "query",
						"description": "You can identify a list by its slug instead of its numerical id. If you decide to do so, note that you'll also have to specify the list owner using the owner_id or owner_screen_name parameters.",
						"schema":{"type":"string"}
					},
					{
						"name": "owner_screen_name",
						"in": "query",
						"description": "The screen name of the user who owns the list being requested by a slug.",
						"schema":{"type":"string"}
					},
					{
						"name": "owner_id",
						"in": "query",
						"description": "The user ID of the user who owns the list being requested by a slug.",
						"schema":{"type":"string"}
					},
					{
						"name": "count",
						"in": "query",
						"description": "Specifies the number of results to return per page (see cursor below). The default is 20, with a maximum of 5,000.",
						"schema":{"type":"string"}
					},
					{
						"name": "cursor",
						"in": "query",
						"description": "Breaks the results into pages. A single page contains 20 lists. Provide a value of -1 to begin paging. Provide values as returned in the response body's next_cursor and previous_cursor attributes to page back and forth in the list. See Using cursors to navigate collections for more information.",
						"schema":{"type":"string"}
					},
					{
						"name": "include_entities",
						"in": "query",
						"description": "When set to either true , t or 1 , each tweet will include a node called 'entities'. This node offers a variety of metadata about the tweet in a discreet structure, including: user_mentions, urls, and hashtags. While entities are opt-in on timelines at present, they will be made a default component of output in the future. See Tweet Entities for more details.",
						"schema":{"type":"string"}
					},
					{
						"name": "skip_status",
						"in": "query",
						"description": "When set to either true , t or 1 statuses will not be included in the returned user objects.",
						"schema":{"type":"string"}
					}
				],
             "responses" : {
                  "200" : {
                      "description" : "The subscribers of the specified list.",
                      "content" : {
                          "application/json" : {
                                "schema" : {
                                    "type" : "object",
                                    "x-facepager-extract" : "users",
									"properties": {
										"users" : {
											"type": "array",
											"items": {
												"type":"object",
												"properties": {
													"$ref" : "#components/schema/user/properties"
												}
											}
									    }
									}
								}
							}
						}
					}
				}
			}
		},
		"/lists/subscribers/show": {
			"get" : {
				"summary": "Check if the specified user is a subscriber of the specified list. Returns the user if they are a subscriber.",
				"externalDocs": {
					"url": "https://developer.twitter.com/en/docs/accounts-and-users/create-manage-lists/api-reference/get-lists-subscribers-show"
				},
				"parameters": [
					{
						"name": "owner_screen_name",
						"in": "query",
						"description": "The screen name of the user who owns the list being requested by a slug.",
						"schema":{"type":"string"}
					},
					{
						"name": "owner_id",
						"in": "query",
						"description": "The user ID of the user who owns the list being requested by a slug.",
						"schema":{"type":"string"}
					},
					{
						"name": "list_id",
						"in": "query",
						"required": true,
						"description": "The numerical id of the list.",
						"schema":{"type":"string"}
					},
					{
						"name": "slug",
						"in": "query",
						"description": "You can identify a list by its slug instead of its numerical id. If you decide to do so, note that you'll also have to specify the list owner using the owner_id or owner_screen_name parameters.",
						"schema":{"type":"string"}
					},
					{
						"name": "user_id",
						"in": "query",
						"example": "<Object ID>",
						"description": "The ID of the user for whom to return results. Helpful for disambiguating when a valid user ID is also a valid screen name.",
						"schema":{"type":"string"}
					},
					{
						"name": "screen_name",
						"in": "query",
						"description": "The screen name of the user for whom to return results. Helpful for disambiguating when a valid screen name is also a user ID.",
						"schema":{"type":"string"}
					},
					{
						"name": "include_entities",
						"in": "query",
						"description": "When set to either true , t or 1 , each tweet will include a node called 'entities'. This node offers a variety of metadata about the tweet in a discreet structure, including: user_mentions, urls, and hashtags. While entities are opt-in on timelines at present, they will be made a default component of output in the future. See Tweet Entities for more details.",
						"schema":{"type":"string"}
					},
					{
						"name": "skip_status",
						"in": "query",
						"description": "When set to either true , t or 1 statuses will not be included in the returned user objects.",
						"schema":{"type":"string"}
					}
				],
             "responses" : {
                  "200" : {
                      "description" : "The user, if subscriber of the specified list.",
                      "content" : {
                          "application/json" : {
                              "schema" : {
                                  "type" : "object",
									"properties": {
										"$ref" : "#components/schema/user/properties"
									}
								}
							}
						}
					}
				}
			}
		},
		"/lists/subscriptions": {
			"get" : {
				"summary": "Obtain a collection of the lists the specified user is subscribed to, 20 lists per page by default. Does not include the user's own lists.",
				"externalDocs": {
					"url": "https://developer.twitter.com/en/docs/accounts-and-users/create-manage-lists/api-reference/get-lists-subscriptions"
				},
				"parameters": [
					{
						"name": "user_id",
						"in": "query",
						"description": "The ID of the user for whom to return results. Helpful for disambiguating when a valid user ID is also a valid screen name.",
						"schema":{"type":"string"}
					},
					{
						"name": "screen_name",
						"in": "query",
						"example": "<Object ID>",
						"description": "The screen name of the user for whom to return results. Helpful for disambiguating when a valid screen name is also a user ID.",
						"schema":{"type":"string"}
					},
					{
						"name": "count",
						"in": "query",
						"description": "The amount of results to return per page. Defaults to 20. No more than 1000 results will ever be returned in a single page.",
						"schema":{"type":"string"}
					},
					{
						"name": "cursor",
						"in": "query",
						"description": "Breaks the results into pages. Provide a value of -1 to begin paging. Provide values as returned in the response body's next_cursor and previous_cursor attributes to page back and forth in the list. It is recommended to always use cursors when the method supports them. See Cursoring for more information.",
						"schema":{"type":"string"}
					}
				],
               "responses" : {
                    "200" : {
                        "description" : "A collection of the lists the specified user is subscribed to.",
                        "content" : {
                            "application/json" : {
                                "schema" : {
                                    "type" : "object",
                                    "x-facepager-extract" : "lists",
									"properties": {
										"lists" : {
											"type": "array",
											"items": {
												"type":"object"
											}
									    }
									}
								}
							}
						}
					}
				}
			}
		},
		"/statuses/home_timeline": {
            "get" : {
                "summary" : "Returns a collection of the most recent Tweets and Retweets posted by the authenticating user and the users they follow. The home timeline is central to how most users interact with the Twitter service. Up to 800 Tweets are obtainable on the home timeline. It is more volatile for users that follow many users or follow users who Tweet frequently.",
                "externalDocs": {
                    "url":"https://developer.twitter.com/en/docs/tweets/timelines/api-reference/get-statuses-home_timeline.html"
                },
                "parameters" : [
                    {
                      "name" : "count",
                      "in" : "query",
					  "description" : "Specifies the number of records to retrieve. Must be less than or equal to 200. Defaults to 20. The value of count is best thought of as a limit to the number of tweets to return because suspended or deleted content is removed after the count has been applied.",
                      "schema":{"type":"string"}
					  },
                    {
                      "name" : "since_id",
                      "in" : "query",
                      "description" : "Returns results with an ID greater than (that is, more recent than) the specified ID. There are limits to the number of Tweets which can be accessed through the API. If the limit of Tweets has occured since the since_id, the since_id will be forced to the oldest ID available.",
                      "schema":{"type":"string"}
					  },
                    {
                      "name" : "max_id",
                      "in" : "query",
                      "description" : "Returns results with an ID less than (that is, older than) or equal to the specified ID.",
                      "schema":{"type":"string"}
					  },
                    {
                      "name" : "trim_user",
                      "in" : "query",
                      "description" : "When set to either true , t or 1 , each tweet returned in a timeline will include a user object including only the status authors numerical ID. Omit this parameter to receive the complete user object.",
                      "example":"true",
					  "schema":{"type":"string"}
					  },
					{
                      "name" : "exclude_replies",
                      "in" : "query",
                      "description" : "This parameter will prevent replies from appearing in the returned timeline. Using exclude_replies with the count parameter will mean you will receive up-to count Tweets - this is because the count parameter retrieves that many Tweets before filtering out retweets and replies.",
                      "schema":{"type":"string"}
					},
                    {
                      "name" : "include_entities",
                      "in" : "query",
                      "description" : "The entities node will not be included when set to false.",
                      "example":"false",
					  "schema":{"type":"string"}
					  },
                    {
                      "name" : "tweet_mode",
                      "in" : "query",
                      "description" : "Any REST API endpoints that return Tweets will accept a new tweet_mode request parameter. Valid request values are compat and extended, which give compatibility mode and extended mode, respectively. The default mode (if no parameter is provided) is compatibility mode, to support older clients and display methods. Tweets rendered in compatibility mode via the standard REST API will not contain the extended_tweet field. REST API clients that wish to get the full text can instead opt into extended mode.",
                      "schema":{
						  "type":"string",
						  "enum": ["extended", "compat"]
					  }
					}
				],
				"x-facepager-pagination": {
					"method" : "decrease",
					"param" : "max_id",
					"key" : "id"
				},
			"responses" : {
				"200" : {
					"description" : "A collection of the most recent Tweets and Retweets posted by the authenticating user and the users they follow..",
					"content" : {
						"application/json": {
                                "schema": {
                                    "type": "array",
									"items": {
										"type":"object",
										"properties": {
											"$ref" : "#components/schema/tweet/properties"
										}
									}
								}
							}
						}
					}
				}
			}
		},
        "/statuses/mentions_timeline": {
            "get" : {
                "summary" : "Returns the 20 most recent mentions (Tweets containing a users's @screen_name) for the authenticating user. The timeline returned is the equivalent of the one seen when you view your mentions on twitter.com. This method can only return up to 800 tweets.",
                "externalDocs": {
                    "url":"https://developer.twitter.com/en/docs/tweets/timelines/api-reference/get-statuses-mentions_timeline"
                },
                "parameters" : [
                    {
                      "name" : "count",
                      "in" : "query",
                      "description" : "Specifies the number of tweets to try and retrieve, up to a maximum of 200. The value of count is best thought of as a limit to the number of tweets to return because suspended or deleted content is removed after the count has been applied. We include retweets in the count, even if include_rts is not supplied. It is recommended you always send include_rts=1 when using this API method.",
                      "schema":{"type":"string"}
					  },
                    {
                      "name" : "since_id",
                      "in" : "query",
                      "description" : "Returns results with an ID greater than (that is, more recent than) the specified ID. There are limits to the number of Tweets which can be accessed through the API. If the limit of Tweets has occured since the since_id, the since_id will be forced to the oldest ID available.",
                      "schema":{"type":"string"}
					  },
                    {
                      "name" : "max_id",
                      "in" : "query",
                      "description" : "Returns results with an ID less than (that is, older than) or equal to the specified ID.",
                      "schema":{"type":"string"}
					  },
                    {
                      "name" : "trim_user",
                      "in" : "query",
                      "description" : "When set to either true , t or 1 , each tweet returned in a timeline will include a user object including only the status authors numerical ID. Omit this parameter to receive the complete user object.",
                      "example":"true",
					  "schema":{"type":"string"}
					  },
                    {
                      "name" : "include_entities",
                      "in" : "query",
                      "description" : "The entities node will not be included when set to false.",
                      "example":"false",
					  "schema":{"type":"string"}
					  },
                    {
                      "name" : "tweet_mode",
                      "in" : "query",
                      "description" : "Any REST API endpoints that return Tweets will accept a new tweet_mode request parameter. Valid request values are compat and extended, which give compatibility mode and extended mode, respectively. The default mode (if no parameter is provided) is compatibility mode, to support older clients and display methods. Tweets rendered in compatibility mode via the standard REST API will not contain the extended_tweet field. REST API clients that wish to get the full text can instead opt into extended mode.",
                      "schema":{
						  "type":"string",
						  "enum": ["extended", "compat"]
					  }
					}
				],
				"x-facepager-pagination": {
					"method" : "decrease",
					"param" : "max_id",
					"key" : "id"
				},
			"responses" : {
				"200" : {
					"description" : "The 20 most recent mentions (Tweets containing a users's @screen_name) for the authenticating user",
					"content" : {
						"application/json": {
                                "schema": {
                                    "type": "array",
									"items": {
										"type":"object",
										"properties": {
											"$ref" : "#components/schema/tweet/properties"
										}
									}
								}
							}
						}
					}
				}
			}
		},
		"/statuses/retweets/{id}": {
            "get" : {
                "summary" : "Returns a collection of the 100 most recent retweets of the Tweet specified by the id parameter.",
                "externalDocs": {
                    "url":"https://developer.twitter.com/en/docs/tweets/post-and-engage/api-reference/get-statuses-retweets-id"
                },
                "parameters" : [
                    {
                      "name" : "id",
                      "in" : "path",
                      "required" : true,
					  "description" : "The numerical ID of the desired status.",
                      "schema":{"type":"string"}
					  },
					{
                      "name" : "count",
                      "in" : "query",
					  "description" : "Specifies the number of records to retrieve. Must be less than or equal to 100.",
                      "schema":{"type":"string"}
					  },
					{
					  "name" : "trim_user",
					   "in" : "query",
					   "description" : "When set to either true , t or 1 , each tweet returned in a timeline will include a user object including only the status authors numerical ID. Omit this parameter to receive the complete user object.",
					   "schema":{"type":"string"}
					},
                    {
                      "name" : "tweet_mode",
                      "in" : "query",
                      "description" : "Any REST API endpoints that return Tweets will accept a new tweet_mode request parameter. Valid request values are compat and extended, which give compatibility mode and extended mode, respectively. The default mode (if no parameter is provided) is compatibility mode, to support older clients and display methods. Tweets rendered in compatibility mode via the standard REST API will not contain the extended_tweet field. REST API clients that wish to get the full text can instead opt into extended mode.",
                      "schema":{
						  "type":"string",
						  "enum": ["extended", "compat"]
					  }
					}
				],
			"responses" : {
				"200" : {
					"description" : "A collection of the 100 most recent retweets of the Tweet specified by the id parameter.",
					"content" : {
						"application/json": {
                                "schema": {
                                    "type": "array",
									"items": {
										"type":"object",
										"properties": {
											"$ref" : "#components/schema/tweet/properties"
										}
									}
								}
							}
						}
					}
				}
			}
		},
	    "/statuses/retweeters/ids": {
			"get" : {
				"summary": "Returns a collection of up to 100 user IDs belonging to users who have retweeted the Tweet specified by the id parameter. This method offers similar data to GET statuses / retweets / :id.",
				"externalDocs": {
					"url": "https://developer.twitter.com/en/docs/tweets/post-and-engage/api-reference/get-statuses-retweeters-ids"
				},
				"parameters": [
					{
						"name": "id",
						"in": "query",
						"required": true,
						"description": "The numerical ID of the desired status.",
						"schema":{"type":"string"}
					},
					{
						"name": "count",
						"in": "query",
						"description": "Specifies the number of records to retrieve. Must be less than or equal to 100.",
						"schema":{"type":"string"}
					},
					{
						"name": "cursor",
						"in": "query",
						"description": "Causes the list of IDs to be broken into pages of no more than 100 IDs at a time. The number of IDs returned is not guaranteed to be 100 as suspended users are filtered out after connections are queried. If no cursor is provided, a value of -1 will be assumed, which is the first 'page.' The response from the API will include a previous_cursor and next_cursor to allow paging back and forth. See our cursor docs for more information. While this method supports the cursor parameter, the entire result set can be returned in a single cursored collection. Using the count parameter with this method will not provide segmented cursors for use with this parameter.",
						"schema":{"type":"string"}
					},
					{
						"name": "stringify_ids",
						"in": "query",
						"description": "Many programming environments will not consume Tweet ids due to their size. Provide this option to have ids returned as strings instead.",
						"schema":{"type":"string"}
					}
				],
               "responses" : {
                    "200" : {
                        "description" : "A collection of up to 100 user IDs belonging to users who have retweeted the Tweet specified by the id parameter.",
                        "content" : {
                            "application/json" : {
                                "schema": {
                                    "type": "object",
                                    "x-facepager-extract" : "ids",
									"x-facepager-objectid" : "ids",
									"properties": {
										"ids": {
											"type": "array"
										}
									}
								}
							}
						}
					}
				}
			}
		},
		"/statuses/show/{id}": {
            "get" : {
                "summary" : "Returns a single Tweet, specified by the id parameter. The Tweet's author will also be embedded within the Tweet. See GET statuses / lookup for getting Tweets in bulk (up to 100 per call). See also Embedded Timelines, Embedded Tweets, and GET statuses/oembed for tools to render Tweets according to Display Requirements.",
                "externalDocs": {
                    "url":"https://developer.twitter.com/en/docs/tweets/post-and-engage/api-reference/get-statuses-show-id"
                },
                "parameters" : [
                    {
                      "name" : "id",
                      "in" : "path",
                      "required" : true,
					  "description" : "The numerical ID of the desired Tweet.",
                      "schema":{"type":"string"}
					},
					{
					  "name" : "trim_user",
					   "in" : "query",
					   "description" : "When set to either true , t or 1 , each Tweet returned in a timeline will include a user object including only the status authors numerical ID. Omit this parameter to receive the complete user object.",
					   "schema":{"type":"string"}
					},
					{
					  "name" : "include_my_retweet",
					   "in" : "query",
					   "description" : "When set to either true , t or 1 , any Tweets returned that have been retweeted by the authenticating user will include an additional current_user_retweet node, containing the ID of the source status for the retweet.",
					   "schema":{"type":"string"}
					},
					{
					  "name" : "include_entities",
					   "in" : "query",
					   "description" : "The entities node will not be included when set to false.",
					   "schema":{"type":"string"}
					},
					{
					  "name" : "include_ext_alt_text",
					   "in" : "query",
					   "description" : "If alt text has been added to any attached media entities, this parameter will return an ext_alt_text value in the top-level key for the media entity. If no value has been set, this will be returned as null.",
					   "schema":{"type":"string"}
					},
					{
					  "name" : "include_card_uri",
					   "in" : "query",
					   "description" : "When set to either true , t or 1 , the retrieved Tweet will include a card_uri attribute when there is an ads card attached to the Tweet and when that card was attached using the card_uri value.",
					   "schema":{"type":"string"}
					},
                    {
                      "name" : "tweet_mode",
                      "in" : "query",
                      "description" : "Any REST API endpoints that return Tweets will accept a new tweet_mode request parameter. Valid request values are compat and extended, which give compatibility mode and extended mode, respectively. The default mode (if no parameter is provided) is compatibility mode, to support older clients and display methods. Tweets rendered in compatibility mode via the standard REST API will not contain the extended_tweet field. REST API clients that wish to get the full text can instead opt into extended mode.",
                      "schema":{
						  "type":"string",
						  "enum": ["extended", "compat"]
					  }
					}
				],
               "responses" : {
                    "200" : {
                        "description" : "A single Tweet, specified by the id parameter.",
                        "content" : {
                            "application/json" : {
                                "schema" : {
                                    "type" : "object",
                                    "properties" : {
										"$ref" : "#components/schema/tweet/properties"
									}
								}
							}
						}
					}
				}
			}
		},
		"/search/tweets": {
            "get" : {
                "summary" : "Returns a collection of relevant Tweets matching a specified query. Please note that Twitter's search service and, by extension, the Search API is not meant to be an exhaustive source of Tweets. Not all Tweets will be indexed or made available via the search interface. To learn how to use Twitter Search effectively, please see the Standard search operators page for a list of available filter operators. Also, see the Working with Timelines page to learn best practices for navigating results by since_id and max_id.",
                "externalDocs": {
                    "url":"https://developer.twitter.com/en/docs/tweets/search/api-reference/get-search-tweets"
                },
                "parameters" : [
                    {
                      "name" : "q",
                      "in" : "query",
                      "description" : "A UTF-8, URL-encoded search query of 500 characters maximum, including operators. Queries may additionally be limited by complexity.",
                      "required" : true,
                      "schema":{"type":"string"}
                    },
					{
					  "name" : "geocode",
					   "in" : "query",
					   "description" : "Returns tweets by users located within a given radius of the given latitude/longitude. The location is preferentially taking from the Geotagging API, but will fall back to their Twitter profile. The parameter value is specified by 'latitude,longitude,radius', where radius units must be specified as either 'mi' (miles) or 'km' (kilometers). Note that you cannot use the near operator via the API to geocode arbitrary locations; however you can use this geocode parameter to search near geocodes directly. A maximum of 1,000 distinct 'sub-regions' will be considered when using the radius modifier.",
					   "schema":{"type":"string"}
					},
					{
					  "name" : "lang",
					   "in" : "query",
					   "description" : "Restricts tweets to the given language, given by an ISO 639-1 code. Language detection is best-effort.",
					   "schema":{"type":"string"}
					},
					{
					  "name" : "locale",
					   "in" : "query",
					   "description" : "Specify the language of the query you are sending (only ja is currently effective). This is intended for language-specific consumers and the default should work in the majority of cases.",
					   "schema":{"type":"string"}
					},
					{
					  "name" : "result_type",
					   "in" : "query",
					   "description" : "Optional. Specifies what type of search results you would prefer to receive. The current default is 'mixed.' Valid values include:* mixed : Include both popular and real time results in the response. * recent : return only the most recent results in the response. * popular : return only the most popular results in the response.",
					   "schema":{"type":"string"}
					},
					{
					  "name" : "count",
					   "in" : "query",
					   "description" : "The number of tweets to return per page, up to a maximum of 100. Defaults to 15. This was formerly the 'rpp' parameter in the old Search API.",
					   "schema":{"type":"string"}
					},
					{
					  "name" : "until",
					   "in" : "query",
					   "description" : "Returns tweets created before the given date. Date should be formatted as YYYY-MM-DD. Keep in mind that the search index has a 7-day limit. In other words, no tweets will be found for a date older than one week.",
					   "schema":{"type":"string"}
					},
					{
					  "name" : "since_id",
					   "in" : "query",
					   "description" : "Returns results with an ID greater than (that is, more recent than) the specified ID. There are limits to the number of Tweets which can be accessed through the API. If the limit of Tweets has occured since the since_id, the since_id will be forced to the oldest ID available.",
					   "schema":{"type":"string"}
					},
					{
					  "name" : "max_id",
					   "in" : "query",
					   "description" : "Returns results with an ID less than (that is, older than) or equal to the specified ID.",
					   "schema":{"type":"string"}
					},
					{
					  "name" : "include_entities",
					   "in" : "query",
					   "description" : "The entities node will not be included when set to false.",
					   "schema":{"type":"string"}
					},
                    {
                      "name" : "tweet_mode",
                      "in" : "query",
                      "description" : "Any REST API endpoints that return Tweets will accept a new tweet_mode request parameter. Valid request values are compat and extended, which give compatibility mode and extended mode, respectively. The default mode (if no parameter is provided) is compatibility mode, to support older clients and display methods. Tweets rendered in compatibility mode via the standard REST API will not contain the extended_tweet field. REST API clients that wish to get the full text can instead opt into extended mode.",
                      "schema":{
						  "type":"string",
						  "enum": ["extended", "compat"]
					  }
					}
				],
				"x-facepager-pagination": {
					"method" : "decrease",
					"param" : "max_id",
					"key" : "id"
				},
                "responses" : {
                    "200" : {
                        "description" : "A collection of relevant Tweets matching a specified query.",
                        "content" : {
                            "application/json" : {
                                "schema" : {
                                    "type" : "object",
                                    "x-facepager-extract" : "statuses",
                                    "properties" : {
                                        "statuses" : {
                                            "type" : "array",
                                            "items" : {
                                                "type":"object",
                                                "properties": {
													"$ref" : "#components/schema/tweet/properties"
												}
											}
										}
                                    }
                                }
                            }
                        }
                    }
                }
			}
		},
		"/statuses/user_timeline": {
            "get": {
                "summary": "Returns a collection of the most recent Tweets posted by the user indicated by the screen_name or user_id parameters. User timelines belonging to protected users may only be requested when the authenticated user either 'owns' the timeline or is an approved follower of the owner. The timeline returned is the equivalent of the one seen as a user's profile on Twitter. This method can only return up to 3,200 of a user's most recent Tweets. Native retweets of other statuses by the user is included in this total, regardless of whether include_rts is set to false when requesting this resource.",
                "externalDocs": {
                    "url":"https://developer.twitter.com/en/docs/tweets/timelines/api-reference/get-statuses-user_timeline"
                },
                "parameters" : [
                    {
                      "name" : "user_id",
                      "in" : "query",
                      "description" : "The ID of the user for whom to return results.",
                      "schema":{"type":"string"}
					  },
                    {
                      "name" : "screen_name",
                      "in" : "query",
					  "example": "<Object ID>",
                      "description" : "The screen name of the user for whom to return results.",
                      "schema":{"type":"string"}
					  },
                    {
                      "name" : "since_id",
                      "in" : "query",
                      "description" : "Returns results with an ID greater than (that is, more recent than) the specified ID. There are limits to the number of Tweets that can be accessed through the API. If the limit of Tweets has occured since the since_id, the since_id will be forced to the oldest ID available.",
                      "schema":{"type":"string"}
					  },
                    {
                      "name" : "count",
                      "in" : "query",
                      "description" : "Specifies the number of Tweets to try and retrieve, up to a maximum of 200 per distinct request. The value of count is best thought of as a limit to the number of Tweets to return because suspended or deleted content is removed after the count has been applied. We include retweets in the count, even if include_rts is not supplied. It is recommended you always send include_rts=1 when using this API method.",
                      "schema":{"type":"string"}
					  },
                    {
                      "name" : "max_id",
                      "in" : "query",
                      "description" : "Returns results with an ID less than (that is, older than) or equal to the specified ID.",
                      "schema":{"type":"string"}
					  },
                    {
                      "name" : "trim_user",
                      "in" : "query",
                      "description" : "When set to either true , t or 1 , each Tweet returned in a timeline will include a user object including only the status authors numerical ID. Omit this parameter to receive the complete user object.",
                      "schema":{"type":"string"}
					  },
                    {
                      "name" : "exclude_replies",
                      "in" : "query",
                      "description" : "This parameter will prevent replies from appearing in the returned timeline. Using exclude_replies with the count parameter will mean you will receive up-to count tweets - this is because the count parameter retrieves that many Tweets before filtering out retweets and replies.",
                      "schema":{"type":"string"}
					  },
                    {
                      "name" : "include_rts",
                      "in" : "query",
                      "description" : "When set to false , the timeline will strip any native retweets (though they will still count toward both the maximal length of the timeline and the slice selected by the count parameter). Note: If you're using the trim_user parameter in conjunction with include_rts, the retweets will still contain a full user object.",
                      "schema":{"type":"string"}
					  },
                    {
                      "name" : "tweet_mode",
                      "in" : "query",
                      "description" : "Any REST API endpoints that return Tweets will accept a new tweet_mode request parameter. Valid request values are compat and extended, which give compatibility mode and extended mode, respectively. The default mode (if no parameter is provided) is compatibility mode, to support older clients and display methods. Tweets rendered in compatibility mode via the standard REST API will not contain the extended_tweet field. REST API clients that wish to get the full text can instead opt into extended mode.",
                      "schema":{"type":"string",
						"enum": ["extended", "compat"]
					  }
					}
				],
				"x-facepager-pagination": {
					"method" : "decrease",
					"param" : "max_id",
					"key" : "id"
				},
			"responses" : {
				"200" : {
					"description" : "A collection of the most recent Tweets posted by the user indicated by the screen_name or user_id parameters..",
					"content" : {
						"application/json": {
                                "schema": {
                                    "type": "array",
									"items": {
										"type":"object",
										"properties": {
											"$ref" : "#components/schema/tweet/properties"	
										}
									}
								}
							}
						}
					}
				}
			}						  
		},
		"/trends/place": {
			"get" : {
				"summary": "Returns the top 50 trending topics for a specific WOEID, if trending information is available for it. The response is an array of trend objects that encode the name of the trending topic, the query parameter that can be used to search for the topic on Twitter Search, and the Twitter Search URL. This information is cached for 5 minutes. Requesting more frequently than that will not return any more data, and will count against rate limit usage. The tweet_volume for the last 24 hours is also returned for many trends if this is available.",
				"externalDocs": {
					"url": "https://developer.twitter.com/en/docs/trends/trends-for-location/api-reference/get-trends-place"
				},
				"parameters": [
					{
						"name": "id",
						"in": "query",
						"required": true,
						"description": "The Yahoo! Where On Earth ID of the location to return trending information for. Global information is available by using 1 as the WOEID.",
						"schema":{"type":"string"}
					},
					{
						"name": "exclude",
						"in": "query",
						"description": "Setting this equal to hashtags will remove all hashtags from the trends list.",
						"schema":{"type":"string"}
					}				
				],
			"responses" : {
				"200" : {
					"description" : "The top 50 trending topics for a specific WOEID, if trending information is available for it.",
					"content" : {
						"application/json": {
                                "schema": {
                                    "type": "array",
									"items": {
										"type":"object",
										"properties": {
											"trends" : {
												"type": "array",
												"items": {
													"type":"object"													
												}
											}
									    }					
									}
								}
							}
						}
					}
				}
			}				
		},
		"/trends/available": {
			"get" : {
				"summary": "Returns the locations that Twitter has trending topic information for. The response is an array of 'locations' that encode the location's WOEID and some other human-readable information such as a canonical name and country the location belongs in. A WOEID is a Yahoo! Where On Earth ID.",
				"externalDocs": {
					"url": "https://developer.twitter.com/en/docs/trends/locations-with-trending-topics/api-reference/get-trends-available"
				},
				"parameters": [],
			"responses" : {
				"200" : {
					"description" : "The locations that Twitter has trending topic information for.",
					"content" : {
						"application/json": {
                                "schema": {
                                    "type": "array",
									"items": {
										"type":"object"
									}
								}
							}
						}
					}
				}
			}		
		},
		"/trends/closest": {
			"get" : {
				"summary": "Returns the locations that Twitter has trending topic information for, closest to a specified location. The response is an array of 'locations' that encode the location's WOEID and some other human-readable information such as a canonical name and country the location belongs in. A WOEID is a Yahoo! Where On Earth ID.",
				"externalDocs": {
					"url": "https://developer.twitter.com/en/docs/trends/locations-with-trending-topics/api-reference/get-trends-closest"
				},
				"parameters": [
					{
						"name": "id",
						"in": "query",
						"required": true,
						"description": "The identifier of the Collection for which to return results.",
						"schema":{"type":"string"}
					}
				],
               "responses" : {
                    "200" : {
                        "description" : "The locations that Twitter has trending topic information for, closest to a specified location.",
                        "content" : {
                            "application/json" : {
                                "schema": {
                                    "type": "array",
									"items": {
										"type":"object"
									}
								}
							}
						}
					}
				}
			}				
		
		},
		"/users/lookup": {
			"get" : {
				"summary": "Returns fully-hydrated user objects for up to 100 users per request, as specified by comma-separated values passed to the user_id and/or screen_name parameters. This method is especially useful when used in conjunction with collections of user IDs returned from GET friends / ids and GET followers / ids. GET users / show is used to retrieve a single user object. There are a few things to note when using this method: You must be following a protected user to be able to see their most recent status update. If you don't follow a protected user their status will be removed. The order of user IDs or screen names may not match the order of users in the returned array. If a requested user is unknown, suspended, or deleted, then that user will not be returned in the results list. If none of your lookup criteria can be satisfied by returning a user object, a HTTP 404 will be thrown. You are strongly encouraged to use a POST for larger requests.",
				"externalDocs": {
					"url": "https://developer.twitter.com/en/docs/accounts-and-users/follow-search-get-users/api-reference/get-users-lookup"
				},
				"parameters": [
					{
						"name": "screen_name",
						"in": "query",
						"example": "<Object ID>",
						"description": "A comma separated list of screen names, up to 100 are allowed in a single request. You are strongly encouraged to use a POST for larger (up to 100 screen names) requests.",
						"schema":{"type":"string"}
					},
					{
						"name": "user_id",
						"in": "query",
						"description": "A comma separated list of user IDs, up to 100 are allowed in a single request. You are strongly encouraged to use a POST for larger requests.",
						"schema":{"type":"string"}
					},
					{
						"name": "include_entities",
						"in": "query",
						"description": "The entities node that may appear within embedded statuses will not be included when set to false.",
						"schema":{"type":"string"}
					},
					{
						"name": "tweet_mode",
						"in": "query",
						"description": "Valid request values are compat and extended, which give compatibility mode and extended mode, respectively for Tweets that contain over 140 characters.",
						"schema":{"type":"string"}
					}
				],
               "responses" : {
                    "200" : {
                        "description" : "Fully-hydrated user objects for up to 100 users per request, as specified by comma-separated values passed to the user_id and/or screen_name parameters.",
                        "content" : {
                            "application/json" : {
                                "schema": {
                                    "type": "array",
									"items": {
										"type":"object",
										"properties": {
											"$ref" : "#components/schema/tweet/properties"	
										}
									}
								}
							}
						}
					}
				}
			}				

		},
		"/users/show": {
			"get" : {
				"summary": "Returns a variety of information about the user specified by the required user_id or screen_name parameter. The author's most recent Tweet will be returned inline when possible. GET users / lookup is used to retrieve a bulk collection of user objects. You must be following a protected user to be able to see their most recent Tweet. If you don't follow a protected user, the user's Tweet will be removed. A Tweet will not always be returned in the current_status field.",
				"externalDocs": {
					"url": "https://developer.twitter.com/en/docs/accounts-and-users/follow-search-get-users/api-reference/get-users-show"
				},
				"parameters": [
					{
						"name": "user_id",
						"in": "query",
						"description": "The ID of the user for whom to return results. Either an id or screen_name is required for this method.",
						"schema":{"type":"string"}
					},
					{
						"name": "screen_name",
						"in": "query",
						"required": true,
						"example": "<Object ID>",
						"description": "The screen name of the user for whom to return results. Either a id or screen_name is required for this method.",
						"schema":{"type":"string"}
					},
					{
						"name": "include_entities",
						"in": "query",
						"description": "The entities node will not be included when set to false.",
						"schema":{"type":"string"}
					}
				],
               "responses" : {
                    "200" : {
                        "description" : "A variety of information about the user specified by the required user_id or screen_name parameter.",
                        "content" : {
                            "application/json" : {
                                "schema" : {
                                    "type" : "object",
									"properties": {
										"$ref" : "#components/schema/user/properties"	
									}					
								}
							}
						}
					}
				}
			}				
		},
		"/users/search": {
			"get" : {
				"summary": "Provides a simple, relevance-based search interface to public user accounts on Twitter. Try querying by topical interest, full name, company name, location, or other criteria. Exact match searches are not supported. Only the first 1,000 matching results are available.",
				"externalDocs": {
					"url": "https://developer.twitter.com/en/docs/accounts-and-users/follow-search-get-users/api-reference/get-users-search"
				},
				"parameters": [
                   {
                      "name" : "q",
                      "in" : "query",
                      "description" : "The search query to run against people search.",
                      "required" : true,
                      "schema":{"type":"string"}
                    },
					{
						"name": "page",
						"in": "query",
						"description": "Specifies the page of results to retrieve.",
						"schema":{"type":"string"}
					},
					{
						"name": "count",
						"in": "query",
						"description": "The number of potential user results to retrieve per page. This value has a maximum of 20.",
						"schema":{"type":"string"}
					},
					{
						"name": "include_entities",
						"in": "query",
						"description": "The entities node will not be included in embedded Tweet objects when set to false.",
						"schema":{"type":"string"}
					}
				],
               "responses" : {
                    "200" : {
                        "description" : "Public user accounts on Twitter.",
                        "content" : {
                            "application/json" : {
                                "schema": {
                                    "type": "array",
									"items": {
										"type":"object",
										"properties": {
											"$ref" : "#components/schema/user/properties"	
										}
									}
								}
							}
						}
					}
				}
			}				
		},
		"/tweets/search/30day/{label}": {
            "get" : {
                "summary" : " 30days API provides ou with Tweets posted within the last 30 days. Tweets are matched and sent back to you based on the query you specify in your request. A query is a rule in which you define what the Tweet you get back should contain.",
                "externalDocs": {
                    "url":"https://developer.twitter.com/en/docs/tweets/search/api-reference/premium-search"
                },
                "parameters" : [
                    {
                      "name" : "label",
                      "in" : "path",
                      "description" : "The (case-sensitive) label associated with your search developer environment, as displayed at https://developer.twitter.com/en/account/environments.",
                      "required" : true,
                      "schema":{"type":"string"},
					  "example": "dev"
                    }, 
					{
					  "name" : "query",
					  "in" : "query",
					  "description" : "The equivalent of one premium rule/filter, with up to 1,024 characters (256 with Sandbox dev environments).This parameter should include ALL portions of the rule/filter, including all operators, and portions of the rule should not be separated into other parameters of the query.",
					  "required" : true,
					  "schema" : {"type":"string"},
					  "example": "snow OR cold OR blizzard"
					},
					{
					  "name" : "tag",
					  "in" : "query",
					  "description" : "Tags can be used to segregate rules and their matching data into different logical groups. If a rule tag is provided, the rule tag is included in the 'matching_rules' attribute. It is recommended to assign rule-specific UUIDs to rule tags and maintain desired mappings on the client side.",
					  "schema" : {"type": "string"},
					  "example" : "8HYG54ZGTU"
					},
					{
					  "name" : "fromDate",
					  "in" : "query",
					  "description" : "The oldest UTC timestamp (from most recent 30 days) from which the Tweets will be provided. Timestamp is in minute granularity and is inclusive (i.e. 12:00 includes the 00 minute). Specified: Using only the fromDate with no toDate parameter will deliver results for the query going back in time from now( ) until the fromDate.Not Specified: If a fromDate is not specified, the API will deliver all of the results for 30 days prior to now( ) or the toDate (if specified). If neither the fromDate or toDate parameter is used, the API will deliver all results for the most recent 30 days, starting at the time of the request, going backwards.",
					  "schema" : {"type": "string"},
					  "example" : "201512220000"
					},
					{
					  "name" : "toDate",
					  "in" : "query",
					  "description" : "The latest, most recent UTC timestamp to which the Tweets will be provided. Timestamp is in minute granularity and is not inclusive (i.e. 11:59 does not include the 59th minute of the hour). Specified: Using only the toDate with no fromDate parameter will deliver the most recent 30 days of data prior to the toDate. Not Specified: If a toDate is not specified, the API will deliver all of the results from now( ) for the query going back in time to the fromDate. If neither the fromDate or toDate parameter is used, the API will deliver all results for the entire 30-day index, starting at the time of the request, going backwards.",
					  "schema" : {"type": "string"},
					  "example" : "201712220000"
					},
					{
					  "name" : "maxResults",
					  "in" : "query",
					  "description" : "The maximum number of search results to be returned by a request. A number between 10 and the system limit (currently 500, 100 for Sandbox environments). By default, a request response will return 100 results.",
					  "schema" : {"type": "string"},
					  "example" : "500"
					},
					{
					  "name" : "next",
					  "in" : "query",
					  "description" : "This parameter is used to get the next 'page' of results. The value used with the parameter is pulled directly from the response provided by the API, and should not be modified.",
					  "schema" : {"type": "string"},
					  "example" : "NTcxODIyMDMyODMwMjU1MTA0"
					}
				],
				"x-facepager-pagination": {
					"method" : "key",
					"param" : "next",
					"key" : "next",
					"stop" : "next"
				},
                "responses" : {
                    "200" : {
                        "description" : "A collection of relevant Tweets matching a specified query.",
                        "content" : {
                            "application/json" : {
                                "schema" : {
                                    "type" : "object",
                                    "x-facepager-extract" : "results",
                                    "properties" : {
                                        "results" : {
                                            "type" : "array",
                                            "items" : {
                                                "type":"object",
                                                "properties": {
													"$ref" : "#components/schema/tweet/properties"
												}
											}
										}
                                    }
                                }
                            }
                        }
                    }
                }
			}
		},
		"/tweets/search/30day/{label}/count":{
			"get" : {
				"summary" : "This endpoint returns counts (data volumes) data for the specified query from the last 30 days. Counts are only an estimate. You shouldn't be expected that the count your receive will be the exact number of activities returned.",
				"externalDocs": {
					"url":"https://developer.twitter.com/en/docs/tweets/search/api-reference/premium-search"
					},
				"parameters" : [
					 {
					  "name" : "label",
					  "in" : "path",
                      "description" : "The (case-sensitive) label associated with your search developer environment, as displayed at https://developer.twitter.com/en/account/environments.",
					  "required": true,
					  "schema" : {"type": "string"},
					  "example" : "dev"
					 },
					 {
					  "name" : "query",
					  "in" : "query",
					  "description" : "The equivalent of one PowerTrack rule, with up to 1,024 characters (256 with Sandbox dev environments). This parameter should include ALL portions of the PowerTrack rule, including all operators, and portions of the rule should not be separated into other parameters of the query.",
					  "required" : true,
					  "schema" : {"type":"string"},
					  "example": "snow OR cold OR blizzard"
					},
					{
					  "name" : "fromDate",
					  "in" : "query",
					  "description" : "The oldest UTC timestamp (from most recent 30 days) from which the Tweets will be provided. Timestamp is in minute granularity and is inclusive (i.e. 12:00 includes the 00 minute). Specified: Using only the fromDate with no toDate parameter, the API will deliver counts (data volumes) data for the query going back in time from now until the fromDate. If the fromDate is older than 31 days from now( ), you will receive a 'next' token to page through your request. Not Specified: If a fromDate is not specified, the API will deliver counts (data volumes) for 30 days prior to now( ) or the toDate (if specified). If neither the fromDate or toDate parameter is used, the API will deliver counts (data volumes) for the most recent 30 days, starting at the time of the request, going backwards.",
					  "schema" : {"type": "string"},
					  "example" : "201512220000"
					},
					{
					  "name" : "toDate",
					  "in" : "query",
					  "description" : "The latest, most recent UTC timestamp to which the Tweets will be provided. Timestamp is in minute granularity and is not inclusive (i.e. 11:59 does not include the 59th minute of the hour). Specified: Using only the toDate with no fromDate parameter will deliver the most recent counts (data volumes) for 30 days prior to the toDate. Not Specified: If a toDate is not specified, the API will deliver counts (data volumes) for the query going back in time to the fromDate. If the fromDate is more than 31 days from now( ), you will receive a 'next' token to page through your request. If neither the fromDate or toDate parameter is used, the API will deliver counts (data volumes) for the most recent 30 days, starting at the time of the request, going backwards.",
					  "schema" : {"type": "string"},
					  "example" : "201712220000"
					},
					{
					  "name" : "bucket",
					  "in" : "query",
					  "description" : "The unit of time for which count data will be provided. Count data can be returned for every day, hour or minute in the requested timeframe. By default, hourly counts will be provided. Options: 'day' 'hour', 'minute'",
					  "schema" : {"type": "string"},
					  "example" : "minute"
					},
					{
					  "name" : "next",
					  "in" : "query",
					  "description" : "This parameter is used to get the next 'page' of results. The value used with the parameter is pulled directly from the response provided by the API, and should not be modified.",
					  "schema" : {"type": "string"},
					  "example" : "NTcxODIyMDMyODMwMjU1MTA0"
					}
				],
				"x-facepager-pagination": {
					"method" : "key",
					"param" : "next",
					"key" : "next",
					"stop" : "next"
				},
				"responses" : {
                    "200" : {
                        "description" : "A count (data volumes) data of Tweets matching a specified query.",
                        "content" : {
                            "application/json" : {
                                "schema" : {
                                    "type" : "object",
                                    "x-facepager-extract" : "results",
                                    "properties" : {
                                        "results" : {
                                            "type" : "array",
                                            "items" : {
                                                "type":"object",
                                                "properties": {
													"$ref" : "#components/schema/tweet/properties" 
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			},
						
		"/tweets/search/fullarchive/{label}": {
            "get" : {
                "summary" : "Full-Archive API provides you with Tweets since the first one posted in 2006. Tweets are matched and sent back to you based on the query you specify in your request. A query is a rule in which you define what the Tweet you get back should contain.",
                "externalDocs": {
                    "url":"https://developer.twitter.com/en/docs/tweets/search/api-reference/premium-search"
                },
                "parameters" : [
                    {
                      "name" : "label",
                      "in" : "path",
                      "description" : "The (case-sensitive) label associated with your search developer environment, as displayed at https://developer.twitter.com/en/account/environments.",
                      "required" : true,
                      "schema":{"type":"string"},
					  "example": "dev"
                    }, 
					{
					  "name" : "query",
					  "in" : "query",
					  "description" : "The equivalent of one premium rule/filter, with up to 1,024 characters (256 with Sandbox dev environments).This parameter should include ALL portions of the rule/filter, including all operators, and portions of the rule should not be separated into other parameters of the query.",
					  "required" : true,
					  "schema" : {"type":"string"},
					  "example": "snow OR cold OR blizzard"
					},
					{
					  "name" : "tag",
					  "in" : "query",
					  "description" : "Tags can be used to segregate rules and their matching data into different logical groups. If a rule tag is provided, the rule tag is included in the 'matching_rules' attribute. It is recommended to assign rule-specific UUIDs to rule tags and maintain desired mappings on the client side.",
					  "schema" : {"type": "string"},
					  "example" : "8HYG54ZGTU"
					},
					{
					  "name" : "fromDate",
					  "in" : "query",
					  "description" : "The oldest UTC timestamp (from most recent 30 days) from which the Tweets will be provided. Timestamp is in minute granularity and is inclusive (i.e. 12:00 includes the 00 minute). Specified: Using only the fromDate with no toDate parameter will deliver results for the query going back in time from now( ) until the fromDate.Not Specified: If a fromDate is not specified, the API will deliver all of the results for 30 days prior to now( ) or the toDate (if specified). If neither the fromDate or toDate parameter is used, the API will deliver all results for the most recent 30 days, starting at the time of the request, going backwards.",
					  "schema" : {"type": "string"},
					  "example" : "201512220000"
					},
					{
					  "name" : "toDate",
					  "in" : "query",
					  "description" : "The latest, most recent UTC timestamp to which the Tweets will be provided. Timestamp is in minute granularity and is not inclusive (i.e. 11:59 does not include the 59th minute of the hour). Specified: Using only the toDate with no fromDate parameter will deliver the most recent 30 days of data prior to the toDate. Not Specified: If a toDate is not specified, the API will deliver all of the results from now( ) for the query going back in time to the fromDate. If neither the fromDate or toDate parameter is used, the API will deliver all results for the entire 30-day index, starting at the time of the request, going backwards.",
					  "schema" : {"type": "string"},
					  "example" : "201712220000"
					},
					{
					  "name" : "maxResults",
					  "in" : "query",
					  "description" : "The maximum number of search results to be returned by a request. A number between 10 and the system limit (currently 500, 100 for Sandbox environments). By default, a request response will return 100 results.",
					  "schema" : {"type": "string"},
					  "example" : "500"
					},
					{
					  "name" : "next",
					  "in" : "query",
					  "description" : "This parameter is used to get the next 'page' of results. The value used with the parameter is pulled directly from the response provided by the API, and should not be modified.",
					  "schema" : {"type": "string"},
					  "example" : "NTcxODIyMDMyODMwMjU1MTA0"
					}
				],
				"x-facepager-pagination": {
					"method" : "key",
					"param" : "next",
					"key" : "next",
					"stop" : "next"
				},
                "responses" : {
                    "200" : {
                        "description" : "A collection of relevant Tweets matching a specified query.",
                        "content" : {
                            "application/json" : {
                                "schema" : {
                                    "type" : "object",
                                    "x-facepager-extract" : "results",
                                    "properties" : {
                                        "results" : {
                                            "type" : "array",
                                            "items" : {
                                                "type":"object",
                                                "properties": {
													"$ref" : "#components/schema/tweet/properties"
												}
											}
										}
                                    }
                                }
                            }
                        }
                    }
                }
			}
		},
		"/tweets/search/fullarchive/{label}/count":{
			"get" : {
				"summary" : "This endpoint returns counts (data volumes) data for the specified query. Counts are only an estimate. You shouldn't be expected that the count your receive will be the exact number of activities returned.",
				"externalDocs": {
					"url":"https://developer.twitter.com/en/docs/tweets/search/api-reference/premium-search"
					},		
				"parameters" : [
					 {
					  "name" : "label",
					  "in" : "path",
                      "description" : "The (case-sensitive) label associated with your search developer environment, as displayed at https://developer.twitter.com/en/account/environments.",
					  "required": true,
					  "schema" : {"type": "string"},
					  "example" : "dev"
					 },
					 {
					  "name" : "query",
					  "in" : "query",
					  "description" : "The equivalent of one PowerTrack rule, with up to 1,024 characters (256 with Sandbox dev environments). This parameter should include ALL portions of the PowerTrack rule, including all operators, and portions of the rule should not be separated into other parameters of the query.",
					  "required" : true,
					  "schema" : {"type":"string"},
					  "example": "snow OR cold OR blizzard"
					},
					{
					  "name" : "fromDate",
					  "in" : "query",
					  "description" : "The oldest UTC timestamp (from most recent 30 days) from which the Tweets will be provided. Timestamp is in minute granularity and is inclusive (i.e. 12:00 includes the 00 minute). Specified: Using only the fromDate with no toDate parameter, the API will deliver counts (data volumes) data for the query going back in time from now until the fromDate. If the fromDate is older than 31 days from now( ), you will receive a 'next' token to page through your request. Not Specified: If a fromDate is not specified, the API will deliver counts (data volumes) for 30 days prior to now( ) or the toDate (if specified). If neither the fromDate or toDate parameter is used, the API will deliver counts (data volumes) for the most recent 30 days, starting at the time of the request, going backwards.",
					  "schema" : {"type": "string"},
					  "example" : "201512220000"
					},
					{
					  "name" : "toDate",
					  "in" : "query",
					  "description" : "The latest, most recent UTC timestamp to which the Tweets will be provided. Timestamp is in minute granularity and is not inclusive (i.e. 11:59 does not include the 59th minute of the hour). Specified: Using only the toDate with no fromDate parameter will deliver the most recent counts (data volumes) for 30 days prior to the toDate. Not Specified: If a toDate is not specified, the API will deliver counts (data volumes) for the query going back in time to the fromDate. If the fromDate is more than 31 days from now( ), you will receive a 'next' token to page through your request. If neither the fromDate or toDate parameter is used, the API will deliver counts (data volumes) for the most recent 30 days, starting at the time of the request, going backwards.",
					  "schema" : {"type": "string"},
					  "example" : "201712220000"
					},
					{
					  "name" : "bucket",
					  "in" : "query",
					  "description" : "The unit of time for which count data will be provided. Count data can be returned for every day, hour or minute in the requested timeframe. By default, hourly counts will be provided. Options: 'day' 'hour', 'minute'",
					  "schema" : {"type": "string"},
					  "example" : "minute"
					},
					{
					  "name" : "next",
					  "in" : "query",
					  "description" : "This parameter is used to get the next 'page' of results. The value used with the parameter is pulled directly from the response provided by the API, and should not be modified.",
					  "schema" : {"type": "string"},
					  "example" : "NTcxODIyMDMyODMwMjU1MTA0"
					}
				],
				"x-facepager-pagination": {
					"method" : "key",
					"param" : "next",
					"key" : "next",
					"stop" : "next"
				},
				"responses" : {
                    "200" : {
                        "description" : "A count (data volumes) data of Tweets matching a specified query.",
                        "content" : {
                            "application/json" : {
                                "schema" : {
                                    "type" : "object",
                                    "x-facepager-extract" : "results",
                                    "properties" : {
                                        "results" : {
                                            "type" : "array",
                                            "items" : {
                                                "type":"object",
                                                "properties": {
													"$ref" : "#components/schema/tweet/properties" 
													}
												}
											}
										}
									}
								}
							}
						}
					}
			}
		}	
	},
	"components": {
		"schema":{
			"tweet" : {
				"properties": {
					"created_at":{"description":"UTC time when this Tweet was created."},
					"id":{"description":"The integer representation of the unique identifier for this Tweet. This number is greater than 53 bits and some programming languages may have difficulty/silent defects in interpreting it. Using a signed 64 bit integer for storing this identifier is safe. Use id_str for fetching the identifier to stay on the safe side. See Twitter IDs, JSON and Snowflake."},
					"id_str":{"description":"The string representation of the unique identifier for this Tweet. Implementations should use this rather than the large integer in id."},
					"text":{"description":"The actual UTF-8 text of the status update. See twitter-text for details on what characters are currently considered valid."},
					"source":{"description":"Utility used to post the Tweet, as an HTML-formatted string. Tweets from the Twitter website have a source value of web."},
					"truncated":{"description":"Indicates whether the value of the text parameter was truncated, for example, as a result of a retweet exceeding the original Tweet text length limit of 140 characters. Truncated text will end in ellipsis, like this ... Since Twitter now rejects long Tweets vs truncating them, the large majority of Tweets will have this set to false . Note that while native retweets may have their toplevel text property shortened, the original text will be available under the retweeted_status object and the truncated parameter will be set to the value of the original status (in most cases, false )."},
					"in_reply_to_status_id":{"description":"Nullable. If the represented Tweet is a reply, this field will contain the integer representation of the original Tweet's ID."},
					"in_reply_to_status_id_str":{"description":"Nullable. If the represented Tweet is a reply, this field will contain the string representation of the original Tweet's ID. "},
					"in_reply_to_user_id":{"description":"Nullable. If the represented Tweet is a reply, this field will contain the integer representation of the original Tweet's author ID. This will not necessarily always be the user directly mentioned in the Tweet."},
					"in_reply_to_user_id_str":{"description":"Nullable. If the represented Tweet is a reply, this field will contain the string representation of the original Tweet's author ID. This will not necessarily always be the user directly mentioned in the Tweet."},
					"in_reply_to_screen_name":{"description":"Nullable. If the represented Tweet is a reply, this field will contain the screen name of the original Tweet's author."},
					"user":{
						"description":"The user who posted this Tweet. See User data dictionary for complete list of attributes.",
						"type": "object",
						"properties": {
						  "$ref" : "#components/schema/user/properties"												  
						}
					},
					"coordinates":{
						"description":"Nullable. Represents the geographic location of this Tweet as reported by the user or client application. The inner coordinates array is formatted as geoJSON (longitude first, then latitude).",
						"type": "object",
						"properties": {
							"$ref" : "#components/schema/coordinates/properties"
						}
					},
					"place":{
						"description":"Nullable When present, indicates that the tweet is associated (but not necessarily originating from) a Place.",
						"type": "object",
						"properties": {
						"$ref" : " #components/schema/place/properties"
						}
					},
					"quoted_status_id":{"description": "This field only surfaces when the Tweet is a quote Tweet. This field contains the integer value Tweet ID of the quoted Tweet."},
					"quoted_status_id_str":{"description":"This field only surfaces when the Tweet is a quote Tweet. This is the string representation Tweet ID of the quoted Tweet."},
					"is_quote_status":{"description":"Indicates whether this is a Quoted Tweet."},
					"quoted_status":{"description":"This field only surfaces when the Tweet is a quote Tweet. This attribute contains the Tweet object of the original Tweet that was quoted."},
					"retweeted_status":{"description":"Users can amplify the broadcast of Tweets authored by other users by retweeting . Retweets can be distinguished from typical Tweets by the existence of a retweeted_status attribute. This attribute contains a representation of the original Tweet that was retweeted. Note that retweets of retweets do not show representations of the intermediary retweet, but only the original Tweet. (Users can also unretweet a retweet they created by deleting their retweet.)"},
					"quote_count":{"description":"Nullable. Indicates approximately how many times this Tweet has been quoted by Twitter users. Note: This object is only available with the Premium and Enterprise tier product."},
					"reply_count":{"description":"Number of times this Tweet has been replied to. Note:This object is only available with the Premium and Enterprise tier products."},
					"retweet_count":{"description":"Number of times this Tweet has been retweeted."},
					"favorite_count":{"description":"Nullable. Indicates approximately how many times this Tweet has been liked by Twitter users."},
					"entities":{
						"description":"Entities which have been parsed out of the text of the Tweet. Additionally see Entities in Twitter Objects.",
						"type": "object",
						"properties": {
							"$ref" : "#components/schema/entities/properties"
						}
					},
					"extended_entities":{"description":"When between one and four native photos or one video or one animated GIF are in Tweet, contains an array 'media' metadata. This is also available in Quote Tweets. Additionally see Entities in Twitter Objects."},
					"favorited":{"description":"Nullable. Indicates whether this Tweet has been liked by the authenticating user."},
					"retweeted":{"description":"Indicates whether this Tweet has been Retweeted by the authenticating user."},
					"possibly_sensitive":{"description":"Nullable. This field only surfaces when a Tweet contains a link. The meaning of the field doesn't pertain to the Tweet content itself, but instead it is an indicator that the URL contained in the Tweet may contain content or media identified as sensitive content."},
					"filter_level":{"description":"Indicates the maximum value of the filter_level parameter which may be used and still stream this Tweet. So a value of medium will be streamed on none, low, and medium streams."},
					"lang":{"description":"Nullable. When present, indicates a BCP 47 language identifier corresponding to the machine-detected language of the Tweet text, or und if no language could be detected."},
					"matching_rules":{"description":"Present in filtered products such as Twitter Search and PowerTrack. Provides the id and tag associated with the rule that matched the Tweet. With PowerTrack, more than one rule can match a Tweet."}
				}
			},
			"user" : {
				"properties": {
					"id":{"description": "The integer representation of the unique identifier for this User. This number is greater than 53 bits and some programming languages may have difficulty/silent defects in interpreting it. Using a signed 64 bit integer for storing this identifier is safe. Use id_str for fetching the identifier to stay on the safe side. See Twitter IDs, JSON and Snowflake."},
					"id_str":{"description": "The string representation of the unique identifier for this User. Implementations should use this rather than the large, possibly un-consumable integer in id."},
					"name":{"description": "The name of the user, as they've defined it. Not necessarily a person's name. Typically capped at 50 characters, but subject to change."},
					"screen_name":{"description": "The screen name, handle, or alias that this user identifies themselves with. screen_names are unique but subject to change. Use id_str as a user identifier whenever possible. Typically a maximum of 15 characters long, but some historical accounts may exist with longer names."},
					"location":{"description": "Nullable . The user-defined location for this account's profile. Not necessarily a location, nor machine-parseable. This field will occasionally be fuzzily interpreted by the Search service."},
					"derived":{"description": "Enterprise APIs only Collection of Enrichment metadata derived for user. Provides the Profile Geo Enrichment metadata. See referenced documentation for more information, including JSON data dictionaries."},
					"url":{"description": "Nullable . A URL provided by the user in association with their profile."},
					"description":{"description": "Nullable . The user-defined UTF-8 string describing their account."},
					"protected":{"description": "When true, indicates that this user has chosen to protect their Tweets. See About Public and Protected Tweets."},
					"verified":{"description": "When true, indicates that the user has a verified account. See Verified Accounts."},
					"followers_count":{"description": "The number of followers this account currently has. Under certain conditions of duress, this field will temporarily indicate '0'. "},
					"frieds_count":{"description": "The number of users this account is following (AKA their \"followings\"). Under certain conditions of duress, this field will temporarily indicate '0'."},
					"listed_count":{"description": "The number of public lists that this user is a member of."},
					"favourites_count":{"description": "The number of Tweets this user has liked in the account's lifetime. British spelling used in the field name for historical reasons."},
					"statuses_count":{"description": "The number of Tweets (including retweets) issued by the user."},
					"created_at":{"description": "The UTC datetime that the user account was created on Twitter."},
					"profile_banner_url":{"description": "The HTTPS-based URL pointing to the standard web representation of the user's uploaded profile banner. By adding a final path element of the URL, it is possible to obtain different image sizes optimized for specific displays. For size variants, please see User Profile Images and Banners."},
					"profile_image_url_https":{"description": "A HTTPS-based URL pointing to the user's profile image."},
					"default_profile":{"description": "When true, indicates that the user has not altered the theme or background of their user profile."},
					"default_profile_image":{"description": "When true, indicates that the user has not uploaded their own profile image and a default image is used instead."},
					"withheld_in_countries":{"description": "When present, indicates a list of uppercase two-letter country codes this content is withheld from. Twitter supports the following non-country values for this field: \"XX\" - Content is withheld in all countries \"XY\" - Content is withheld due to a DMCA request."},
					"withheld_scope":{"description": "When present, indicates that the content being withheld is a \"user.\""}
				}
			},
			"entities" : {
				"properties": {
					"hashtags":{
						"description": "Represents hashtags which have been parsed out of the Tweet text.",
						"type": "object",
						"properties": {
							"indices":{"description": "An array of integers indicating the offsets within the Tweet text where the hashtag begins and ends. The first integer represents the location of the # character in the Tweet text string. The second integer represents the location of the first character after the hashtag. Therefore the difference between the two numbers will be the length of the hashtag name plus one (for the '#' character)."},
							"text":{"description": "Name of the hashtag, minus the leading '#' character."}
							}
					},			
					"media":{
						"description": "Represents media elements uploaded with the Tweet.",
						"type": "object",
						"properties": {
							"display_url":{"description": "URL of the media to display to clients."},
							"expanded_url":{"description": "An expanded version of display_url. Links to the media display page."},
							"id":{"description": "ID of the media expressed as a 64-bit integer. "},
							"id_str":{"description": "ID of the media expressed as a string."},
							"indices":{"description": "An array of integers indicating the offsets within the Tweet text where the URL begins and ends. The first integer represents the location of the first character of the URL in the Tweet text. The second integer represents the location of the first non-URL character occurring after the URL (or the end of the string if the URL is the last part of the Tweet text)."},
							"media_url":{"description": "An http:// URL pointing directly to the uploaded media file.For media in direct messages, media_url is the same https URL as media_url_https and must be accessed by signing a request with the user's access token using OAuth 1.0A.It is not possible to access images via an authenticated twitter.com session. Please visit this page to learn how to account for these recent change. You cannot directly embed these images in a web page. See Photo Media URL formatting for how to format a photo's URL, such as media_url_https, based on the available sizes."},
							"media_url_https":{"description": "An https:// URL pointing directly to the uploaded media file, for embedding on https pages. For media in direct messages, media_url_https must be accessed by signing a request with the user's access token using OAuth 1.0A. It is not possible to access images via an authenticated twitter.com session. Please visit this page to learn how to account for these recent change.  You cannot directly embed these images in a web page. See Photo Media URL formatting for how to format a photo's URL, such as media_url_https, based on the available sizes."},
							"sizes":{
								"description": "An object showing available sizes for the media file. See Photo Media URL formatting for how to format a photo's URL, such as media_url_https, based on the available sizes.",
								"type": "object",
								"properties": {
									"thumb":{
										"description": "Information for a thumbnail-sized version of the media.Thumbnail-sized photo media will be limited to fill a 150x150 boundary and cropped.",
										"type": "object",
										"properties": {
											"w":{"description": "Width in pixels of this size."},
											"h":{"description": "Height in pixels of this size."},
											"resize":{"description": "Resizing method used to obtain this size. A value of fit means that the media was resized to fit one dimension, keeping its native aspect ratio. A value of crop means that the media was cropped in order to fit a specific resolution."
										}										
									},
									"large":{
										"description": "Information for a large-sized version of the media. Small-sized photo media will be limited to fit within a 680x680 boundary.",
										"type": "object",
										"properties": {
											"w":{"description": "Width in pixels of this size."},
											"h":{"description": "Height in pixels of this size."},
											"resize":{"description": "Resizing method used to obtain this size. A value of fit means that the media was resized to fit one dimension, keeping its native aspect ratio. A value of crop means that the media was cropped in order to fit a specific resolution."}
										}	
									},
									"medium":{
										"description": "Information for a medium-sized version of the media. Medium-sized photo media will be limited to fit within a 1200x1200 boundary.",
										"type": "object",
										"properties": {
											"w":{"description": "Width in pixels of this size."},
											"h":{"description": "Height in pixels of this size."},
											"resize":{"description": "Resizing method used to obtain this size. A value of fit means that the media was resized to fit one dimension, keeping its native aspect ratio. A value of crop means that the media was cropped in order to fit a specific resolution."}
										}										
									},
									"small":{
										"description": "Information for a small-sized version of the media.Large-sized photo media will be limited to fit within a 2048x2048 boundary.",
										"type": "object",
										"properties":{
											"w":{"description": "Width in pixels of this size."},
											"h":{"description": "Height in pixels of this size."},
											"resize":{"description": "Resizing method used to obtain this size. A value of fit means that the media was resized to fit one dimension, keeping its native aspect ratio. A value of crop means that the media was cropped in order to fit a specific resolution."}
										}
									}
								}	
							},
							"source_status_id":{"description": "Nullable. For Tweets containing media that was originally associated with a different tweet, this ID points to the original Tweet. "},
							"source_status_id_str":{"description": "Nullable. For Tweets containing media that was originally associated with a different tweet, this string-based ID points to the original Tweet."},
							"type":{"description": "Type of uploaded media. Possible types include photo, video, and animated_gif."},
							"url":{"description": "Wrapped URL for the media link. This corresponds with the URL embedded directly into the raw Tweet text, and the values for the indices parameter."}
							}
						}
					},
					"urls":{
						"description": "Represents URLs included in the text of a Tweet.",
						"type": "object",
						"properties": {
							"display_url":{"description": "URL pasted/typed into Tweet."},
							"expanded_url":{"description": "Expanded version of `` display_url`` ."},
							"indices":{"description": "An array of integers representing offsets within the Tweet text where the URL begins and ends. The first integer represents the location of the first character of the URL in the Tweet text. The second integer represents the location of the first non-URL character after the end of the URL."},
							"url":{"description": "Wrapped URL, corresponding to the value embedded directly into the raw Tweet text, and the values for the indices parameter."}
						}
					},
					"user_mentions":{
						"description": "Represents other Twitter users mentioned in the text of the Tweet.",
						"type": "object",
						"properties": {
							"id":{"description": "ID of the mentioned user, as an integer."},
							"id_str":{"description": "If of the mentioned user, as a string."},
							"indices":{"description": "An array of integers representing the offsets within the Tweet text where the user reference begins and ends. The first integer represents the location of the '@' character of the user mention. The second integer represents the location of the first non-screenname character following the user mention."},
							"name":{"description": "Display name of the referenced user."},
							"screen_name":{"description": "Screen name of the referenced user."}
						}
					},
					"symbols":{
						"description": "Represents symbols, i.e. $cashtags, included in the text of the Tweet.",
						"type": "object",
						"properties": {
							"indices":{"description": "An array of integers indicating the offsets within the Tweet text where the symbol/cashtag begins and ends. The first integer represents the location of the $ character in the Tweet text string. The second integer represents the location of the first character after the cashtag. Therefore the difference between the two numbers will be the length of the hashtag name plus one (for the '$' character)."},
							"text":{"description": "Name of the cashhtag, minus the leading '$' character."}
						}
					},
					"polls":{
						"description": "Represents Twitter Polls included in the Tweet.",
						"type": "object",
						"properties" : {
							"options":{"description": "An array of options, each having a poll position, and the text for that position."},
							"end_datetime":{"description": "Time stamp (UTC) of when poll ends."},
							"duration_minutes":{"description": "Duration of poll in minutes."}
						}
					}
				}
			},
			"place": {
				"properties": {
					"id":{"description": "ID representing this place. Note that this is represented as a string, not an integer."},
					"url":{"description": "URL representing the location of additional place metadata for this place. "},
					"place_type":{"description": "The type of location represented by this place."},
					"name":{"description": "Short human-readable representation of the place's name."},
					"full_name":{"description": "Full human-readable representation of the place's name."},
					"country_code":{"description": "Shortened country code representing the country containing this place."},
					"country":{"description": "Name of the country containing this place."},
					"bounding_box":{
						"description": "A bounding box of coordinates which encloses this place.",
						"type": "object",
						"properties": {
							"coordinates":{"description": "A series of longitude and latitude points, defining a box which will contain the Place entity this bounding box is related to. Each point is an array in the form of [longitude, latitude]. Points are grouped into an array per bounding box. Bounding box arrays are wrapped in one additional array to be compatible with the polygon notation."},
							"type":{"description": "The type of data encoded in the coordinates property. This will be \"Polygon\" for bounding boxes and \"Point\" for Tweets with exact coordinates."}
						}
					},
					"attributes":{"description": "When using PowerTrack, 30-Day and Full-Archive Search APIs, and Volume Streams this hash is null."}
				}
			},
			"coordinates": {
				"properties":{
					"coordinates":{"description": "The longitude and latitude of the Tweet's location, as a collection in the form [longitude, latitude]."},
					"type":{"description": "The type of data encoded in the coordinates property. This will be \"Point\" for Tweet coordinates fields."}
				}
			}
		}
	}		
}